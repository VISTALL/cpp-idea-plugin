/* The following code was generated by JFlex 1.4.3 on 10.12.11 5:04 */

/* It's an automatically generated code. Do not modify it. */
package org.napile.cpp4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10.12.11 5:04 from the specification file
 * <tt>H:/napile/tools/plugins/idea/cpp4idea/src/main/java/org/napile/cpp4idea/lang/lexer/c.flex</tt>
 */
class _CLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\1\1\26\1\0\1\1\1\6\16\3\4\0\1\1\1\57"+
    "\1\31\1\0\1\2\1\66\1\64\1\27\1\67\1\70\1\5\1\61"+
    "\1\76\1\24\1\22\1\4\1\14\1\13\6\11\2\7\1\101\1\75"+
    "\1\62\1\56\1\63\1\100\1\102\1\12\1\16\1\12\1\21\1\23"+
    "\1\20\5\2\1\17\3\2\1\25\7\2\1\15\2\2\1\73\1\30"+
    "\1\74\1\65\1\10\1\0\1\35\1\32\1\37\1\46\1\34\1\47"+
    "\1\51\1\54\1\44\1\2\1\36\1\50\1\2\1\42\1\41\1\53"+
    "\1\2\1\33\1\40\1\43\1\45\1\55\1\52\1\15\2\2\1\71"+
    "\1\60\1\72\1\77\41\3\2\0\4\2\4\0\1\2\2\0\1\3"+
    "\7\0\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2"+
    "\31\0\162\2\4\0\14\2\16\0\5\2\11\0\1\2\21\0\130\3"+
    "\5\0\23\3\12\0\1\2\13\0\1\2\1\0\3\2\1\0\1\2"+
    "\1\0\24\2\1\0\54\2\1\0\46\2\1\0\5\2\4\0\202\2"+
    "\1\0\4\3\3\0\105\2\1\0\46\2\2\0\2\2\6\0\20\2"+
    "\41\0\46\2\2\0\1\2\7\0\47\2\11\0\21\3\1\0\27\3"+
    "\1\0\3\3\1\0\1\3\1\0\2\3\1\0\1\3\13\0\33\2"+
    "\5\0\3\2\15\0\4\3\14\0\6\3\13\0\32\2\5\0\13\2"+
    "\16\3\7\0\12\3\4\0\2\2\1\3\143\2\1\0\1\2\10\3"+
    "\1\0\6\3\2\2\2\3\1\0\4\3\2\2\12\3\3\2\2\0"+
    "\1\2\17\0\1\3\1\2\1\3\36\2\33\3\2\0\3\2\60\0"+
    "\46\2\13\3\1\2\u014f\0\3\3\66\2\2\0\1\3\1\2\20\3"+
    "\2\0\1\2\4\3\3\0\12\2\2\3\2\0\12\3\21\0\3\3"+
    "\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2"+
    "\3\0\4\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3"+
    "\11\0\1\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3\4\2"+
    "\15\0\3\3\1\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\3\1\0\5\3"+
    "\4\0\2\3\2\0\3\3\13\0\4\2\1\0\1\2\7\0\14\3"+
    "\3\2\14\0\3\3\1\0\11\2\1\0\3\2\1\0\26\2\1\0"+
    "\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\10\3\1\0"+
    "\3\3\1\0\3\3\2\0\1\2\17\0\2\2\2\3\2\0\12\3"+
    "\1\0\1\2\17\0\3\3\1\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\6\3"+
    "\3\0\2\3\2\0\3\3\10\0\2\3\4\0\2\2\1\0\3\2"+
    "\4\0\12\3\1\0\1\2\20\0\1\3\1\2\1\0\6\2\3\0"+
    "\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0"+
    "\2\2\3\0\3\2\3\0\10\2\1\0\3\2\4\0\5\3\3\0"+
    "\3\3\1\0\4\3\11\0\1\3\17\0\11\3\11\0\1\2\7\0"+
    "\3\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0"+
    "\5\2\4\0\7\3\1\0\3\3\1\0\4\3\7\0\2\3\11\0"+
    "\2\2\4\0\12\3\22\0\2\3\1\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\2\0\1\3\1\2\7\3\1\0"+
    "\3\3\1\0\4\3\7\0\2\3\7\0\1\2\1\0\2\2\4\0"+
    "\12\3\22\0\2\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\20\2\4\0\6\3\2\0\3\3\1\0\4\3\11\0\1\3\10\0"+
    "\2\2\4\0\12\3\22\0\2\3\1\0\22\2\3\0\30\2\1\0"+
    "\11\2\1\0\1\2\2\0\7\2\3\0\1\3\4\0\6\3\1\0"+
    "\1\3\1\0\10\3\22\0\2\3\15\0\60\2\1\3\2\2\7\3"+
    "\4\0\10\2\10\3\1\0\12\3\47\0\2\2\1\0\1\2\2\0"+
    "\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0"+
    "\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\3"+
    "\2\2\6\3\1\0\2\3\1\2\2\0\5\2\1\0\1\2\1\0"+
    "\6\3\2\0\12\3\2\0\2\2\42\0\1\2\27\0\2\3\6\0"+
    "\12\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0\2\3\10\2"+
    "\1\0\42\2\6\0\24\3\1\0\2\3\4\2\4\0\10\3\1\0"+
    "\44\3\11\0\1\3\71\0\42\2\1\0\5\2\1\0\2\2\1\0"+
    "\7\3\3\0\4\3\6\0\12\3\6\0\6\2\4\3\106\0\46\2"+
    "\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2"+
    "\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\3"+
    "\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2"+
    "\3\0\3\2\17\0\15\2\1\0\4\2\3\3\13\0\22\2\3\3"+
    "\13\0\22\2\2\3\14\0\15\2\1\0\3\2\1\0\2\3\14\0"+
    "\64\2\40\3\3\0\1\2\3\0\2\2\1\3\2\0\12\3\41\0"+
    "\3\3\2\0\12\3\6\0\130\2\10\0\51\2\1\3\126\0\35\2"+
    "\3\0\14\3\4\0\14\3\12\0\12\3\36\2\2\0\5\2\u038b\0"+
    "\154\2\224\0\234\2\4\0\132\2\6\0\26\2\2\0\6\2\2\0"+
    "\46\2\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0"+
    "\3\2\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0"+
    "\3\2\1\0\7\2\17\0\4\3\32\0\5\3\20\0\2\2\23\0"+
    "\1\2\13\0\4\3\6\0\6\3\1\0\1\2\15\0\1\2\40\0"+
    "\22\2\36\0\15\3\4\0\1\3\3\0\6\3\27\0\1\2\4\0"+
    "\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\4\2\1\0\3\2\1\0\7\2\3\0"+
    "\3\2\5\0\5\2\26\0\44\2\u0e81\0\3\2\31\0\11\2\6\3"+
    "\1\0\5\2\2\0\5\2\4\0\126\2\2\0\2\3\2\0\3\2"+
    "\1\0\137\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2"+
    "\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2"+
    "\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\3\12\2"+
    "\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2"+
    "\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2"+
    "\3\0\20\3\20\0\4\3\17\0\2\2\30\0\3\2\31\0\1\2"+
    "\6\0\5\2\1\0\207\2\2\0\1\3\4\0\1\2\13\0\12\3"+
    "\7\0\32\2\4\0\1\2\1\0\32\2\12\0\132\2\3\0\6\2"+
    "\2\0\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2"+
    "\22\0\3\3\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\15\3\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\0\1\44\1\45"+
    "\3\46\2\0\3\6\1\46\1\0\1\47\1\50\2\11"+
    "\2\12\7\3\1\51\1\3\1\52\5\3\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\41\2\46\2\0\1\6\1\44\1\0"+
    "\1\6\1\0\1\67\6\3\1\70\1\3\1\71\4\3"+
    "\1\72\5\0\1\46\2\0\2\3\1\73\1\74\3\3"+
    "\1\75\2\3\1\76\1\41\3\0\1\45\1\46\1\77"+
    "\4\3\1\100\1\3\1\101\1\3\1\102\1\3\1\103"+
    "\1\3\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\103\0\u07da"+
    "\0\u081d\0\u0860\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\u08a3\0\u08e6"+
    "\0\103\0\103\0\u0929\0\103\0\103\0\103\0\u096c\0\u09af"+
    "\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\103"+
    "\0\103\0\103\0\u0bc7\0\u0c0a\0\103\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\311\0\u0e22\0\311\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\u0fb4\0\103\0\103\0\103\0\103"+
    "\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1103\0\u1189"+
    "\0\u11cc\0\u120f\0\103\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e"+
    "\0\u13a1\0\311\0\u13e4\0\311\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\103\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\311\0\311\0\u17d1\0\u1814\0\u1857"+
    "\0\311\0\u189a\0\u18dd\0\311\0\103\0\u1920\0\u1963\0\u19a6"+
    "\0\u15b9\0\u15b9\0\311\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\311"+
    "\0\u1af5\0\311\0\u1b38\0\311\0\u1b7b\0\311\0\u1bbe\0\311"+
    "\0\311";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\3\1\7"+
    "\1\4\1\7\1\4\1\7\1\10\5\4\1\11\1\4"+
    "\1\12\1\4\1\3\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\2\4\1\20\1\21\1\4\1\22\1\4\1\23"+
    "\1\4\1\24\1\25\1\4\1\26\1\27\1\30\1\4"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\104\0\1\3"+
    "\4\0\1\3\17\0\1\3\56\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\24\4\31\0\1\57"+
    "\1\60\50\0\1\61\102\0\1\62\33\0\1\7\1\63"+
    "\1\7\1\0\2\7\2\0\1\64\1\65\1\66\1\67"+
    "\1\70\10\0\1\70\11\0\1\66\1\65\1\64\41\0"+
    "\1\71\1\72\1\73\1\0\2\73\1\74\1\75\1\64"+
    "\1\65\1\66\1\67\1\70\6\0\1\75\1\0\1\70"+
    "\11\0\1\66\1\65\1\64\41\0\1\76\1\0\1\76"+
    "\1\0\2\76\5\0\1\77\104\0\1\100\31\0\1\101"+
    "\24\0\6\13\1\0\17\13\1\0\1\102\1\103\52\13"+
    "\6\14\1\0\17\14\1\0\1\14\1\104\1\105\51\14"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\4\1\106\22\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\2\4\1\107\21\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\16\4\1\110\5\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\111\3\4"+
    "\1\112\14\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\20\4\1\113\3\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\1\114\21\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\15\4\1\115\6\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\1\116\4\4\1\117\14\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\7\4\1\120\14\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\7\4\1\121\14\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\22\4\1\122\1\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\13\4\1\123\10\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\7\4\1\124\14\4"+
    "\103\0\1\125\102\0\1\126\102\0\1\127\1\0\1\130"+
    "\100\0\1\131\2\0\1\132\77\0\1\133\3\0\1\134"+
    "\76\0\1\135\5\0\1\136\74\0\1\137\102\0\1\140"+
    "\24\0\6\57\1\0\17\57\1\0\54\57\5\141\1\0"+
    "\75\141\7\0\1\7\1\63\1\7\1\0\2\7\75\0"+
    "\1\76\1\0\1\76\1\0\2\76\3\0\1\65\1\66"+
    "\1\0\1\70\10\0\1\70\11\0\1\66\1\65\42\0"+
    "\1\142\1\0\1\142\1\0\2\142\3\0\1\65\1\66"+
    "\2\0\1\143\21\0\1\66\1\65\11\0\1\143\30\0"+
    "\1\71\1\144\1\71\1\0\2\71\3\0\1\65\1\66"+
    "\1\67\1\70\10\0\1\70\11\0\1\66\1\65\42\0"+
    "\1\71\1\72\1\73\1\0\2\73\75\0\1\71\1\72"+
    "\1\73\1\0\2\73\2\0\1\64\1\65\1\66\1\67"+
    "\1\70\10\0\1\70\11\0\1\66\1\65\1\64\32\0"+
    "\7\145\1\146\1\145\4\146\1\145\1\146\1\147\2\146"+
    "\1\145\1\146\1\145\1\150\1\0\3\145\1\146\1\145"+
    "\2\146\1\145\1\146\6\145\2\146\1\147\2\145\1\150"+
    "\27\145\13\0\2\151\2\0\1\64\30\0\1\64\41\0"+
    "\1\76\1\152\1\76\1\0\2\76\3\0\1\65\1\66"+
    "\1\0\1\70\10\0\1\70\11\0\1\66\1\65\55\0"+
    "\1\153\60\0\6\13\1\0\17\13\1\0\54\13\6\14"+
    "\1\0\17\14\1\0\54\14\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\2\4\1\154\21\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\11\4\1\155\12\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\156\15\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\157\15\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\10\4\1\160\13\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\12\4\1\161\11\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\20\4\1\162\3\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\15\4\1\163\6\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\4\1\164\22\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\11\4\1\165\12\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\12\4\1\166\11\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\167\23\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\12\4\1\170\11\4\103\0"+
    "\1\171\24\0\5\141\1\172\75\141\7\0\1\142\1\173"+
    "\1\142\1\0\2\142\3\0\1\65\1\66\24\0\1\66"+
    "\1\65\42\0\1\142\1\0\1\142\1\0\2\142\3\0"+
    "\1\65\1\66\24\0\1\66\1\65\42\0\1\71\1\144"+
    "\1\71\1\0\2\71\75\0\1\174\1\0\4\174\1\0"+
    "\1\174\1\0\2\174\1\0\1\174\1\0\1\175\4\0"+
    "\1\174\1\0\2\174\1\0\1\174\6\0\2\174\3\0"+
    "\1\175\27\0\7\145\1\146\1\176\4\146\1\145\1\146"+
    "\1\147\2\146\1\145\1\146\1\145\1\150\1\0\3\145"+
    "\1\146\1\145\2\146\1\145\1\146\6\145\2\146\1\147"+
    "\2\145\1\150\27\145\7\0\1\177\1\0\1\177\1\174"+
    "\2\177\1\0\1\174\1\0\2\174\1\0\1\174\1\200"+
    "\1\175\4\0\1\174\1\0\2\174\1\0\1\174\6\0"+
    "\2\174\3\0\1\175\5\0\1\200\31\0\1\201\2\0"+
    "\2\151\2\0\1\64\30\0\1\64\41\0\1\76\1\152"+
    "\1\76\1\0\2\76\70\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\202\20\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\13\4\1\203\10\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\2\4\1\204\21\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\2\4\1\205\21\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\11\4\1\206\12\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\11\4\1\207\12\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\210\20\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\7\4\1\211\14\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\16\4\1\212\5\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\16\4\1\213\5\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\14\4\1\214\7\4\25\0"+
    "\4\141\1\215\1\172\75\141\7\0\1\142\1\173\1\142"+
    "\1\0\2\142\75\0\1\174\1\216\4\174\1\0\1\174"+
    "\1\0\2\174\1\0\1\174\1\0\1\175\4\0\1\174"+
    "\1\0\2\174\1\0\1\174\6\0\2\174\3\0\1\175"+
    "\36\0\1\142\1\0\1\142\1\0\2\142\7\0\1\200"+
    "\34\0\1\200\30\0\1\146\1\217\4\146\1\0\1\146"+
    "\1\0\2\146\1\0\1\146\1\0\1\175\4\0\1\146"+
    "\1\0\2\146\1\0\1\146\6\0\2\146\3\0\1\175"+
    "\36\0\1\177\1\220\1\177\1\174\2\177\1\0\1\174"+
    "\1\0\1\221\1\222\1\0\1\174\1\0\1\175\4\0"+
    "\1\174\1\0\2\174\1\0\1\174\6\0\1\222\1\221"+
    "\3\0\1\175\36\0\1\142\1\0\1\142\1\0\2\142"+
    "\76\0\1\201\2\0\2\151\70\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\4\4\1\223\17\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\4\1\224\22\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\12\4\1\225\11\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\5\4\1\226\16\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\13\4\1\227\10\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\2\4\1\230\21\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\12\4\1\231\11\4"+
    "\34\0\1\174\1\216\4\174\1\0\1\174\1\0\2\174"+
    "\1\0\1\174\6\0\1\174\1\0\2\174\1\0\1\174"+
    "\6\0\2\174\42\0\1\146\1\217\4\146\1\0\1\146"+
    "\1\0\2\146\1\0\1\146\6\0\1\146\1\0\2\146"+
    "\1\0\1\146\6\0\2\146\42\0\1\177\1\220\1\177"+
    "\1\174\2\177\1\0\1\174\1\0\2\174\1\0\1\174"+
    "\6\0\1\174\1\0\2\174\1\0\1\174\6\0\2\174"+
    "\35\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\10\4\1\232\13\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\10\4\1\233\13\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\22\4\1\234\1\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\16\4\1\235\5\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\5\4\1\236\16\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\13\4\1\237\10\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\11\4\1\240\12\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\2\4\1\241\21\4"+
    "\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7169];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\1\11\3\1\14\11\2\1\2\11"+
    "\1\0\3\11\2\1\2\0\4\1\1\0\3\11\2\1"+
    "\1\11\17\1\7\11\1\1\4\11\3\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\11\15\1\1\11\5\0\1\1"+
    "\2\0\13\1\1\11\3\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CLexer(){
    this((java.io.Reader)null);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }


  _CLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1786) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { return CTokenType.ANDAND;
          }
        case 70: break;
        case 15: 
          { return CTokenType.LT;
          }
        case 71: break;
        case 55: 
          { return CTokenType.ELLIPSIS;
          }
        case 72: break;
        case 1: 
          { return CTokenType.BAD_CHARACTER;
          }
        case 73: break;
        case 10: 
          { return CTokenType.STRING_LITERAL;
          }
        case 74: break;
        case 62: 
          { return CTokenType.VOID_KEYWORD;
          }
        case 75: break;
        case 68: 
          { return CTokenType.DEFAULT_KEYWORD;
          }
        case 76: break;
        case 14: 
          { return CTokenType.PLUS;
          }
        case 77: break;
        case 25: 
          { return CTokenType.RBRACKET;
          }
        case 78: break;
        case 51: 
          { return CTokenType.ANDEQ;
          }
        case 79: break;
        case 59: 
          { return CTokenType.ELSE_KEYWORD;
          }
        case 80: break;
        case 54: 
          { return CTokenType.PERCEQ;
          }
        case 81: break;
        case 35: 
          { return CTokenType.ASTERISKEQ;
          }
        case 82: break;
        case 50: 
          { return CTokenType.LTLT;
          }
        case 83: break;
        case 32: 
          { return CTokenType.END_OF_LINE_COMMENT;
          }
        case 84: break;
        case 20: 
          { return CTokenType.LPARENTH;
          }
        case 85: break;
        case 29: 
          { return CTokenType.QUEST;
          }
        case 86: break;
        case 66: 
          { return CTokenType.SWITCH_KEYWORD;
          }
        case 87: break;
        case 8: 
          { return CTokenType.MINUS;
          }
        case 88: break;
        case 31: 
          { return CTokenType.AT;
          }
        case 89: break;
        case 18: 
          { return CTokenType.XOR;
          }
        case 90: break;
        case 38: 
          { return CTokenType.DOUBLE_LITERAL;
          }
        case 91: break;
        case 13: 
          { return CTokenType.OR;
          }
        case 92: break;
        case 3: 
          { return CTokenType.IDENTIFIER;
          }
        case 93: break;
        case 67: 
          { return CTokenType.PUBLIC_KEYWORD;
          }
        case 94: break;
        case 45: 
          { return CTokenType.OREQ;
          }
        case 95: break;
        case 26: 
          { return CTokenType.SEMICOLON;
          }
        case 96: break;
        case 42: 
          { return CTokenType.DO_KEYWORD;
          }
        case 97: break;
        case 2: 
          { return CTokenType.WHITE_SPACE;
          }
        case 98: break;
        case 40: 
          { return CTokenType.MINUSEQ;
          }
        case 99: break;
        case 12: 
          { return CTokenType.EXCL;
          }
        case 100: break;
        case 69: 
          { return CTokenType.CONTINUE_KEYWORD;
          }
        case 101: break;
        case 34: 
          { return CTokenType.DIVEQ;
          }
        case 102: break;
        case 7: 
          { return CTokenType.DOT;
          }
        case 103: break;
        case 9: 
          { return CTokenType.CHARACTER_LITERAL;
          }
        case 104: break;
        case 6: 
          { return CTokenType.INTEGER_LITERAL;
          }
        case 105: break;
        case 53: 
          { return CTokenType.XOREQ;
          }
        case 106: break;
        case 4: 
          { return CTokenType.DIV;
          }
        case 107: break;
        case 58: 
          { return CTokenType.LTLTEQ;
          }
        case 108: break;
        case 17: 
          { return CTokenType.AND;
          }
        case 109: break;
        case 47: 
          { return CTokenType.PLUSEQ;
          }
        case 110: break;
        case 37: 
          { return CTokenType.FLOAT_LITERAL;
          }
        case 111: break;
        case 24: 
          { return CTokenType.LBRACKET;
          }
        case 112: break;
        case 63: 
          { return CTokenType.BREAK_KEYWORD;
          }
        case 113: break;
        case 65: 
          { return CTokenType.RETURN_KEYWORD;
          }
        case 114: break;
        case 64: 
          { return CTokenType.WHILE_KEYWORD;
          }
        case 115: break;
        case 16: 
          { return CTokenType.GT;
          }
        case 116: break;
        case 39: 
          { return CTokenType.MINUSMINUS;
          }
        case 117: break;
        case 28: 
          { return CTokenType.TILDE;
          }
        case 118: break;
        case 41: 
          { return CTokenType.IF_KEYWORD;
          }
        case 119: break;
        case 5: 
          { return CTokenType.ASTERISK;
          }
        case 120: break;
        case 61: 
          { return CTokenType.GOTO_KEYWORD;
          }
        case 121: break;
        case 44: 
          { return CTokenType.NE;
          }
        case 122: break;
        case 43: 
          { return CTokenType.EQEQ;
          }
        case 123: break;
        case 48: 
          { return CTokenType.PLUSPLUS;
          }
        case 124: break;
        case 57: 
          { return CTokenType.FOR_KEYWORD;
          }
        case 125: break;
        case 56: 
          { return CTokenType.NEW_KEYWORD;
          }
        case 126: break;
        case 19: 
          { return CTokenType.PERC;
          }
        case 127: break;
        case 11: 
          { return CTokenType.EQ;
          }
        case 128: break;
        case 21: 
          { return CTokenType.RPARENTH;
          }
        case 129: break;
        case 60: 
          { return CTokenType.CASE_KEYWORD;
          }
        case 130: break;
        case 46: 
          { return CTokenType.OROR;
          }
        case 131: break;
        case 27: 
          { return CTokenType.COMMA;
          }
        case 132: break;
        case 49: 
          { return CTokenType.LE;
          }
        case 133: break;
        case 36: 
          { return CTokenType.LONG_LITERAL;
          }
        case 134: break;
        case 22: 
          { return CTokenType.LBRACE;
          }
        case 135: break;
        case 23: 
          { return CTokenType.RBRACE;
          }
        case 136: break;
        case 33: 
          { return CTokenType.C_STYLE_COMMENT;
          }
        case 137: break;
        case 30: 
          { return CTokenType.COLON;
          }
        case 138: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
