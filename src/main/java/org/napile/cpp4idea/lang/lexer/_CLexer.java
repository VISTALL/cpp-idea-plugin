/* The following code was generated by JFlex 1.4.3 on 11.12.11 15:10 */

/* It's an automatically generated code. Do not modify it. */
package org.napile.cpp4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11.12.11 15:10 from the specification file
 * <tt>H:/napile/tools/plugins/idea/cpp4idea/src/main/java/org/napile/cpp4idea/lang/lexer/c.flex</tt>
 */
class _CLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\1\1\2\1\0\1\1\1\7\16\4\4\0\1\1\1\63"+
    "\1\31\1\34\1\3\1\70\1\66\1\27\1\71\1\72\1\6\1\65"+
    "\1\100\1\25\1\23\1\5\1\15\1\14\6\12\2\10\1\103\1\77"+
    "\1\32\1\62\1\33\1\102\1\104\1\13\1\17\1\13\1\22\1\24"+
    "\1\21\5\3\1\20\3\3\1\26\7\3\1\16\2\3\1\75\1\30"+
    "\1\76\1\67\1\11\1\0\1\47\1\45\1\37\1\42\1\43\1\44"+
    "\1\54\1\57\1\35\1\3\1\50\1\40\1\3\1\36\1\52\1\56"+
    "\1\3\1\46\1\51\1\53\1\41\1\60\1\55\1\16\1\61\1\3"+
    "\1\73\1\64\1\74\1\101\41\4\2\0\4\3\4\0\1\3\2\0"+
    "\1\4\7\0\1\3\4\0\1\3\5\0\27\3\1\0\37\3\1\0"+
    "\u013f\3\31\0\162\3\4\0\14\3\16\0\5\3\11\0\1\3\21\0"+
    "\130\4\5\0\23\4\12\0\1\3\13\0\1\3\1\0\3\3\1\0"+
    "\1\3\1\0\24\3\1\0\54\3\1\0\46\3\1\0\5\3\4\0"+
    "\202\3\1\0\4\4\3\0\105\3\1\0\46\3\2\0\2\3\6\0"+
    "\20\3\41\0\46\3\2\0\1\3\7\0\47\3\11\0\21\4\1\0"+
    "\27\4\1\0\3\4\1\0\1\4\1\0\2\4\1\0\1\4\13\0"+
    "\33\3\5\0\3\3\15\0\4\4\14\0\6\4\13\0\32\3\5\0"+
    "\13\3\16\4\7\0\12\4\4\0\2\3\1\4\143\3\1\0\1\3"+
    "\10\4\1\0\6\4\2\3\2\4\1\0\4\4\2\3\12\4\3\3"+
    "\2\0\1\3\17\0\1\4\1\3\1\4\36\3\33\4\2\0\3\3"+
    "\60\0\46\3\13\4\1\3\u014f\0\3\4\66\3\2\0\1\4\1\3"+
    "\20\4\2\0\1\3\4\4\3\0\12\3\2\4\2\0\12\4\21\0"+
    "\3\4\1\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\1\3\3\0\4\3\2\0\1\4\1\3\7\4\2\0\2\4\2\0"+
    "\3\4\11\0\1\4\4\0\2\3\1\0\3\3\2\4\2\0\12\4"+
    "\4\3\15\0\3\4\1\0\6\3\4\0\2\3\2\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0\1\4\1\0"+
    "\5\4\4\0\2\4\2\0\3\4\13\0\4\3\1\0\1\3\7\0"+
    "\14\4\3\3\14\0\3\4\1\0\11\3\1\0\3\3\1\0\26\3"+
    "\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4\1\3\10\4"+
    "\1\0\3\4\1\0\3\4\2\0\1\3\17\0\2\3\2\4\2\0"+
    "\12\4\1\0\1\3\17\0\3\4\1\0\10\3\2\0\2\3\2\0"+
    "\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4\1\3"+
    "\6\4\3\0\2\4\2\0\3\4\10\0\2\4\4\0\2\3\1\0"+
    "\3\3\4\0\12\4\1\0\1\3\20\0\1\4\1\3\1\0\6\3"+
    "\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3"+
    "\3\0\2\3\3\0\3\3\3\0\10\3\1\0\3\3\4\0\5\4"+
    "\3\0\3\4\1\0\4\4\11\0\1\4\17\0\11\4\11\0\1\3"+
    "\7\0\3\4\1\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3"+
    "\1\0\5\3\4\0\7\4\1\0\3\4\1\0\4\4\7\0\2\4"+
    "\11\0\2\3\4\0\12\4\22\0\2\4\1\0\10\3\1\0\3\3"+
    "\1\0\27\3\1\0\12\3\1\0\5\3\2\0\1\4\1\3\7\4"+
    "\1\0\3\4\1\0\4\4\7\0\2\4\7\0\1\3\1\0\2\3"+
    "\4\0\12\4\22\0\2\4\1\0\10\3\1\0\3\3\1\0\27\3"+
    "\1\0\20\3\4\0\6\4\2\0\3\4\1\0\4\4\11\0\1\4"+
    "\10\0\2\3\4\0\12\4\22\0\2\4\1\0\22\3\3\0\30\3"+
    "\1\0\11\3\1\0\1\3\2\0\7\3\3\0\1\4\4\0\6\4"+
    "\1\0\1\4\1\0\10\4\22\0\2\4\15\0\60\3\1\4\2\3"+
    "\7\4\4\0\10\3\10\4\1\0\12\4\47\0\2\3\1\0\1\3"+
    "\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3"+
    "\1\4\2\3\6\4\1\0\2\4\1\3\2\0\5\3\1\0\1\3"+
    "\1\0\6\4\2\0\12\4\2\0\2\3\42\0\1\3\27\0\2\4"+
    "\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\10\3\1\0\42\3\6\0\24\4\1\0\2\4\4\3\4\0\10\4"+
    "\1\0\44\4\11\0\1\4\71\0\42\3\1\0\5\3\1\0\2\3"+
    "\1\0\7\4\3\0\4\4\6\0\12\4\6\0\6\3\4\4\106\0"+
    "\46\3\12\0\51\3\7\0\132\3\5\0\104\3\5\0\122\3\6\0"+
    "\7\3\1\0\77\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0"+
    "\1\3\1\0\4\3\2\0\47\3\1\0\1\3\1\0\4\3\2\0"+
    "\37\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0"+
    "\4\3\2\0\7\3\1\0\7\3\1\0\27\3\1\0\37\3\1\0"+
    "\1\3\1\0\4\3\2\0\7\3\1\0\47\3\1\0\23\3\16\0"+
    "\11\4\56\0\125\3\14\0\u026c\3\2\0\10\3\12\0\32\3\5\0"+
    "\113\3\3\0\3\3\17\0\15\3\1\0\4\3\3\4\13\0\22\3"+
    "\3\4\13\0\22\3\2\4\14\0\15\3\1\0\3\3\1\0\2\4"+
    "\14\0\64\3\40\4\3\0\1\3\3\0\2\3\1\4\2\0\12\4"+
    "\41\0\3\4\2\0\12\4\6\0\130\3\10\0\51\3\1\4\126\0"+
    "\35\3\3\0\14\4\4\0\14\4\12\0\12\4\36\3\2\0\5\3"+
    "\u038b\0\154\3\224\0\234\3\4\0\132\3\6\0\26\3\2\0\6\3"+
    "\2\0\46\3\2\0\6\3\2\0\10\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\37\3\2\0\65\3\1\0\7\3\1\0\1\3"+
    "\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3\4\0\15\3"+
    "\5\0\3\3\1\0\7\3\17\0\4\4\32\0\5\4\20\0\2\3"+
    "\23\0\1\3\13\0\4\4\6\0\6\4\1\0\1\3\15\0\1\3"+
    "\40\0\22\3\36\0\15\4\4\0\1\4\3\0\6\4\27\0\1\3"+
    "\4\0\1\3\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\4\3\1\0\3\3\1\0\7\3"+
    "\3\0\3\3\5\0\5\3\26\0\44\3\u0e81\0\3\3\31\0\11\3"+
    "\6\4\1\0\5\3\2\0\5\3\4\0\126\3\2\0\2\4\2\0"+
    "\3\3\1\0\137\3\5\0\50\3\4\0\136\3\21\0\30\3\70\0"+
    "\20\3\u0200\0\u19b6\3\112\0\u51a6\3\132\0\u048d\3\u0773\0\u2ba4\3\u215c\0"+
    "\u012e\3\2\0\73\3\225\0\7\3\14\0\5\3\5\0\1\3\1\4"+
    "\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3\50\0"+
    "\15\3\3\0\20\4\20\0\4\4\17\0\2\3\30\0\3\3\31\0"+
    "\1\3\6\0\5\3\1\0\207\3\2\0\1\4\4\0\1\3\13\0"+
    "\12\4\7\0\32\3\4\0\1\3\1\0\32\3\12\0\132\3\3\0"+
    "\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0\2\3\3\0"+
    "\2\3\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\1"+
    "\17\4\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\0\1\46\1\47\3\50\2\0\3\7\1\50\1\0"+
    "\1\51\1\52\2\12\2\14\2\53\1\54\1\55\3\0"+
    "\1\56\5\4\1\57\13\4\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\43\2\50"+
    "\2\0\1\7\1\46\1\0\1\7\1\0\1\72\1\73"+
    "\4\0\1\74\5\4\1\75\11\4\5\0\1\50\7\0"+
    "\1\76\4\4\1\77\5\4\1\100\2\4\1\101\1\43"+
    "\3\0\1\47\1\50\5\0\1\102\3\4\1\103\4\4"+
    "\1\104\1\4\2\0\1\105\1\0\1\106\3\4\1\107"+
    "\1\110\1\111\1\4\1\112\1\0\1\113\1\114\2\4"+
    "\1\115\1\116\1\117\1\120\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\105\0\317\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\105\0\u02f7\0\u033c\0\105"+
    "\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564"+
    "\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"+
    "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\105"+
    "\0\105\0\105\0\105\0\105\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\u09b4\0\u09f9\0\105\0\105\0\u0a3e"+
    "\0\105\0\105\0\105\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\105\0\105\0\105\0\u0cf0"+
    "\0\u0d35\0\105\0\u0d7a\0\u0dbf\0\u0e04\0\u0d7a\0\u0e49\0\u0e8e"+
    "\0\u0ed3\0\317\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\317"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u12de\0\u1323\0\105\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\105\0\105\0\u1368\0\u13ad\0\u13f2"+
    "\0\u1437\0\u147c\0\u14c1\0\u147c\0\u1506\0\u154b\0\u1590\0\105"+
    "\0\105\0\u15d5\0\u161a\0\u165f\0\u16a4\0\317\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\317\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39"+
    "\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61"+
    "\0\u1da6\0\u1deb\0\317\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\317"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\317\0\u209d\0\u20e2"+
    "\0\317\0\105\0\u2127\0\u216c\0\u21b1\0\u1b39\0\u1b39\0\u21f6"+
    "\0\u223b\0\u2280\0\u22c5\0\u230a\0\317\0\u234f\0\u2394\0\u23d9"+
    "\0\317\0\u241e\0\u2463\0\u24a8\0\u24ed\0\317\0\u2532\0\u2577"+
    "\0\u25bc\0\105\0\u2601\0\105\0\u2646\0\u268b\0\u26d0\0\317"+
    "\0\317\0\317\0\u2715\0\317\0\u275a\0\105\0\105\0\u279f"+
    "\0\u27e4\0\317\0\317\0\105\0\317\0\317";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\3"+
    "\1\10\1\5\1\10\1\5\1\10\1\11\5\5\1\12"+
    "\1\5\1\13\1\5\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\5\1\33\1\5\1\34\1\35"+
    "\1\36\1\37\1\5\1\40\1\5\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\106\0\1\3\5\0\1\3\100\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\25\5\30\0\1\64"+
    "\1\65\53\0\1\66\104\0\1\67\32\0\1\10\1\70"+
    "\1\10\1\0\2\10\2\0\1\71\1\72\1\73\1\74"+
    "\1\75\13\0\1\71\1\0\1\73\1\75\1\72\50\0"+
    "\1\76\1\77\1\100\1\0\2\100\1\101\1\102\1\71"+
    "\1\72\1\73\1\74\1\75\13\0\1\71\1\0\1\73"+
    "\1\75\1\72\1\102\47\0\1\103\1\0\1\103\1\0"+
    "\2\103\5\0\1\104\106\0\1\105\34\0\1\106\22\0"+
    "\2\14\1\0\4\14\1\0\17\14\1\107\1\110\54\14"+
    "\2\16\1\0\4\16\1\0\20\16\1\111\1\112\53\16"+
    "\2\113\1\0\4\113\1\0\20\113\1\114\1\113\1\115"+
    "\27\113\1\116\22\113\35\0\1\117\4\0\1\120\1\121"+
    "\44\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\7\5\1\122\15\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\6\5\1\123\16\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\12\5\1\124\2\5\1\125\7\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\1\5"+
    "\1\126\23\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\6\5\1\127\6\5\1\130\7\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\3\5\1\131\21\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\15\5\1\132\7\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\11\5\1\133\13\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\6\5\1\134\16\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\1\135\17\5\1\136\4\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\24\5\1\137"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\15\5\1\140\7\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\22\5\1\141\2\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\4\5\1\142\20\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\15\5\1\143\7\5"+
    "\105\0\1\144\104\0\1\145\104\0\1\146\1\0\1\147"+
    "\102\0\1\150\2\0\1\151\101\0\1\152\3\0\1\153"+
    "\100\0\1\154\104\0\1\155\22\0\2\64\1\0\4\64"+
    "\1\0\75\64\6\156\1\0\76\156\10\0\1\10\1\70"+
    "\1\10\1\0\2\10\77\0\1\103\1\0\1\103\1\0"+
    "\2\103\3\0\1\72\1\73\1\0\1\75\15\0\1\73"+
    "\1\75\1\72\50\0\1\157\1\0\1\157\1\0\2\157"+
    "\3\0\1\72\1\73\2\0\1\160\14\0\1\73\1\0"+
    "\1\72\20\0\1\160\27\0\1\76\1\161\1\76\1\0"+
    "\2\76\3\0\1\72\1\73\1\74\1\75\15\0\1\73"+
    "\1\75\1\72\50\0\1\76\1\77\1\100\1\0\2\100"+
    "\77\0\1\76\1\77\1\100\1\0\2\100\2\0\1\71"+
    "\1\72\1\73\1\74\1\75\13\0\1\71\1\0\1\73"+
    "\1\75\1\72\40\0\2\162\1\0\5\162\1\163\1\162"+
    "\4\163\1\162\1\163\1\164\2\163\1\162\1\163\1\162"+
    "\1\165\10\162\1\163\1\164\1\162\4\163\1\162\1\163"+
    "\6\162\1\165\26\162\14\0\2\166\2\0\1\71\17\0"+
    "\1\71\54\0\1\103\1\167\1\103\1\0\2\103\3\0"+
    "\1\72\1\73\1\0\1\75\15\0\1\73\1\75\1\72"+
    "\63\0\1\170\61\0\2\14\1\0\4\14\1\0\75\14"+
    "\2\16\1\0\4\16\1\0\75\16\2\113\1\0\4\113"+
    "\1\0\20\113\1\114\1\113\1\0\54\113\1\0\4\113"+
    "\1\0\75\113\62\0\1\171\60\0\1\172\5\0\1\173"+
    "\103\0\1\174\77\0\1\175\51\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\20\5\1\176\4\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\14\5\1\177\10\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\5\1\200\23\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\14\5\1\201\10\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\7\5\1\202\15\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\14\5\1\203\10\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\11\5\1\204\13\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\6\5\1\205\16\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\16\5\1\206\6\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\17\5\1\207\5\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\210\24\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\21\5\1\211\3\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\16\5\1\212\6\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\1\213\24\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\10\5\1\214\14\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\1\215"+
    "\24\5\23\0\6\156\1\216\76\156\10\0\1\157\1\217"+
    "\1\157\1\0\2\157\3\0\1\72\1\73\17\0\1\73"+
    "\1\0\1\72\50\0\1\157\1\0\1\157\1\0\2\157"+
    "\3\0\1\72\1\73\17\0\1\73\1\0\1\72\50\0"+
    "\1\76\1\161\1\76\1\0\2\76\77\0\1\220\1\0"+
    "\4\220\1\0\1\220\1\0\2\220\1\0\1\220\1\0"+
    "\1\221\10\0\1\220\2\0\4\220\1\0\1\220\6\0"+
    "\1\221\26\0\2\162\1\0\5\162\1\163\1\222\4\163"+
    "\1\162\1\163\1\164\2\163\1\162\1\163\1\162\1\165"+
    "\10\162\1\163\1\164\1\162\4\163\1\162\1\163\6\162"+
    "\1\165\26\162\10\0\1\223\1\0\1\223\1\220\2\223"+
    "\1\0\1\220\1\0\2\220\1\0\1\220\1\224\1\221"+
    "\10\0\1\220\2\0\4\220\1\0\1\220\6\0\1\221"+
    "\6\0\1\224\30\0\1\225\2\0\2\166\2\0\1\71"+
    "\17\0\1\71\54\0\1\103\1\167\1\103\1\0\2\103"+
    "\126\0\1\226\103\0\1\227\3\0\1\230\106\0\1\231"+
    "\102\0\1\232\45\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\6\5\1\233\16\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\14\5"+
    "\1\234\1\5\1\235\6\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\236\24\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\12\5\1\237\12\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\6\5\1\240\16\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\12\5\1\241\12\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\4\5\1\242\20\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\1\5\1\243\23\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\16\5\1\244\6\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\6\5\1\245\16\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\15\5\1\246\7\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\3\5\1\247\21\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\3\5\1\250\21\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\5\5\1\251\17\5\23\0\5\156\1\252\1\216\76\156"+
    "\10\0\1\157\1\217\1\157\1\0\2\157\77\0\1\220"+
    "\1\253\4\220\1\0\1\220\1\0\2\220\1\0\1\220"+
    "\1\0\1\221\10\0\1\220\2\0\4\220\1\0\1\220"+
    "\6\0\1\221\36\0\1\157\1\0\1\157\1\0\2\157"+
    "\7\0\1\224\37\0\1\224\27\0\1\163\1\254\4\163"+
    "\1\0\1\163\1\0\2\163\1\0\1\163\1\0\1\221"+
    "\10\0\1\163\2\0\4\163\1\0\1\163\6\0\1\221"+
    "\36\0\1\223\1\255\1\223\1\220\2\223\1\0\1\220"+
    "\1\0\1\256\1\257\1\0\1\220\1\0\1\221\10\0"+
    "\1\220\2\0\1\257\1\220\1\256\1\220\1\0\1\220"+
    "\6\0\1\221\36\0\1\157\1\0\1\157\1\0\2\157"+
    "\100\0\1\225\2\0\2\166\127\0\1\260\106\0\1\261"+
    "\105\0\1\262\76\0\1\263\104\0\1\264\52\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\16\5"+
    "\1\265\6\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\1\266\24\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\17\5\1\267"+
    "\5\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\4\5\1\270\20\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\13\5\1\271"+
    "\11\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\11\5\1\272\13\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\6\5\1\273"+
    "\16\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\2\5\1\274\22\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\5\5\1\275"+
    "\17\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\6\5\1\276\16\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\1\277\24\5"+
    "\33\0\1\220\1\253\4\220\1\0\1\220\1\0\2\220"+
    "\1\0\1\220\12\0\1\220\2\0\4\220\1\0\1\220"+
    "\45\0\1\163\1\254\4\163\1\0\1\163\1\0\2\163"+
    "\1\0\1\163\12\0\1\163\2\0\4\163\1\0\1\163"+
    "\45\0\1\223\1\255\1\223\1\220\2\223\1\0\1\220"+
    "\1\0\2\220\1\0\1\220\12\0\1\220\2\0\4\220"+
    "\1\0\1\220\76\0\1\300\106\0\1\301\105\0\1\302"+
    "\76\0\1\303\112\0\1\304\43\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\5\1\305\23\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\1\5\1\306\23\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\3\5\1\307\21\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\1\5\1\310\23\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\5\5\1\311\17\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\22\5\1\312\2\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\6\5\1\313\16\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\2\5\1\314\22\5\65\0\1\315\106\0\1\316"+
    "\103\0\1\317\44\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\4\5\1\320\20\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\6\5"+
    "\1\321\16\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\16\5\1\322\6\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\7\5"+
    "\1\323\15\5\66\0\1\324\44\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\6\5\1\325\16\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\5\5\1\326\17\5\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10281];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\1\11\2\1\1\11"+
    "\27\1\14\11\2\1\2\11\1\0\3\11\2\1\2\0"+
    "\4\1\1\0\3\11\2\1\1\11\4\1\3\0\22\1"+
    "\12\11\3\1\2\0\2\1\1\0\1\1\1\0\2\11"+
    "\4\0\20\1\5\0\1\1\7\0\17\1\1\11\3\0"+
    "\2\1\5\0\13\1\2\0\1\11\1\0\1\11\10\1"+
    "\1\0\2\11\4\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CLexer(){
    this((java.io.Reader)null);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }


  _CLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _CLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1788) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { return CTokenType.ASTERISKEQ;
          }
        case 82: break;
        case 59: 
          { return CTokenType.LTLTEQ;
          }
        case 83: break;
        case 77: 
          { return CTokenType.DEFAULT_KEYWORD;
          }
        case 84: break;
        case 29: 
          { return CTokenType.COMMA;
          }
        case 85: break;
        case 39: 
          { return CTokenType.FLOAT_LITERAL;
          }
        case 86: break;
        case 73: 
          { return CTokenType.SWITCH_KEYWORD;
          }
        case 87: break;
        case 43: 
          { return CTokenType.STRING_INCLUDE_LITERAL;
          }
        case 88: break;
        case 69: 
          { return CTokenType.S_IFDEF_KEYWORD;
          }
        case 89: break;
        case 40: 
          { return CTokenType.DOUBLE_LITERAL;
          }
        case 90: break;
        case 46: 
          { return CTokenType.IF_KEYWORD;
          }
        case 91: break;
        case 61: 
          { return CTokenType.FOR_KEYWORD;
          }
        case 92: break;
        case 56: 
          { return CTokenType.XOREQ;
          }
        case 93: break;
        case 64: 
          { return CTokenType.GOTO_KEYWORD;
          }
        case 94: break;
        case 22: 
          { return CTokenType.LPARENTH;
          }
        case 95: break;
        case 78: 
          { return CTokenType.TYPEDEF_KEYWORD;
          }
        case 96: break;
        case 12: 
          { return CTokenType.STRING_LITERAL;
          }
        case 97: break;
        case 10: 
          { return CTokenType.CHARACTER_LITERAL;
          }
        case 98: break;
        case 18: 
          { return CTokenType.PLUS;
          }
        case 99: break;
        case 65: 
          { return CTokenType.VOID_KEYWORD;
          }
        case 100: break;
        case 48: 
          { return CTokenType.EQEQ;
          }
        case 101: break;
        case 36: 
          { return CTokenType.DIVEQ;
          }
        case 102: break;
        case 38: 
          { return CTokenType.LONG_LITERAL;
          }
        case 103: break;
        case 4: 
          { return CTokenType.IDENTIFIER;
          }
        case 104: break;
        case 79: 
          { return CTokenType.S_INCLUDE_KEYWORD;
          }
        case 105: break;
        case 80: 
          { return CTokenType.CONTINUE_KEYWORD;
          }
        case 106: break;
        case 3: 
          { return CTokenType.NEW_LINE;
          }
        case 107: break;
        case 34: 
          { return CTokenType.END_OF_LINE_COMMENT;
          }
        case 108: break;
        case 44: 
          { return CTokenType.LTLT;
          }
        case 109: break;
        case 16: 
          { return CTokenType.EXCL;
          }
        case 110: break;
        case 1: 
          { return CTokenType.BAD_CHARACTER;
          }
        case 111: break;
        case 58: 
          { return CTokenType.ELLIPSIS;
          }
        case 112: break;
        case 13: 
          { return CTokenType.LT;
          }
        case 113: break;
        case 52: 
          { return CTokenType.PLUSEQ;
          }
        case 114: break;
        case 54: 
          { return CTokenType.ANDEQ;
          }
        case 115: break;
        case 57: 
          { return CTokenType.PERCEQ;
          }
        case 116: break;
        case 50: 
          { return CTokenType.OREQ;
          }
        case 117: break;
        case 2: 
          { return CTokenType.WHITE_SPACE;
          }
        case 118: break;
        case 62: 
          { return CTokenType.CASE_KEYWORD;
          }
        case 119: break;
        case 67: 
          { return CTokenType.BREAK_KEYWORD;
          }
        case 120: break;
        case 76: 
          { return CTokenType.S_DEFINE_KEYWORD;
          }
        case 121: break;
        case 30: 
          { return CTokenType.TILDE;
          }
        case 122: break;
        case 14: 
          { return CTokenType.GT;
          }
        case 123: break;
        case 19: 
          { return CTokenType.AND;
          }
        case 124: break;
        case 7: 
          { return CTokenType.INTEGER_LITERAL;
          }
        case 125: break;
        case 81: 
          { return CTokenType.UNSIGNED_KEYWORD;
          }
        case 126: break;
        case 17: 
          { return CTokenType.OR;
          }
        case 127: break;
        case 25: 
          { return CTokenType.RBRACE;
          }
        case 128: break;
        case 24: 
          { return CTokenType.LBRACE;
          }
        case 129: break;
        case 9: 
          { return CTokenType.MINUS;
          }
        case 130: break;
        case 71: 
          { return CTokenType.RETURN_KEYWORD;
          }
        case 131: break;
        case 31: 
          { return CTokenType.QUEST;
          }
        case 132: break;
        case 41: 
          { return CTokenType.MINUSMINUS;
          }
        case 133: break;
        case 33: 
          { return CTokenType.AT;
          }
        case 134: break;
        case 27: 
          { return CTokenType.RBRACKET;
          }
        case 135: break;
        case 60: 
          { return CTokenType.NEW_KEYWORD;
          }
        case 136: break;
        case 68: 
          { return CTokenType.WHILE_KEYWORD;
          }
        case 137: break;
        case 49: 
          { return CTokenType.NE;
          }
        case 138: break;
        case 21: 
          { return CTokenType.PERC;
          }
        case 139: break;
        case 70: 
          { return CTokenType.S_ENDIF_KEYWORD;
          }
        case 140: break;
        case 45: 
          { return CTokenType.LE;
          }
        case 141: break;
        case 20: 
          { return CTokenType.XOR;
          }
        case 142: break;
        case 5: 
          { return CTokenType.DIV;
          }
        case 143: break;
        case 53: 
          { return CTokenType.PLUSPLUS;
          }
        case 144: break;
        case 42: 
          { return CTokenType.MINUSEQ;
          }
        case 145: break;
        case 74: 
          { return CTokenType.PUBLIC_KEYWORD;
          }
        case 146: break;
        case 35: 
          { return CTokenType.C_STYLE_COMMENT;
          }
        case 147: break;
        case 47: 
          { return CTokenType.DO_KEYWORD;
          }
        case 148: break;
        case 11: 
          { return CTokenType.NEXT_LINE;
          }
        case 149: break;
        case 55: 
          { return CTokenType.ANDAND;
          }
        case 150: break;
        case 26: 
          { return CTokenType.LBRACKET;
          }
        case 151: break;
        case 32: 
          { return CTokenType.COLON;
          }
        case 152: break;
        case 51: 
          { return CTokenType.OROR;
          }
        case 153: break;
        case 63: 
          { return CTokenType.ELSE_KEYWORD;
          }
        case 154: break;
        case 8: 
          { return CTokenType.DOT;
          }
        case 155: break;
        case 75: 
          { return CTokenType.S_IFNDEF_KEYWORD;
          }
        case 156: break;
        case 72: 
          { return CTokenType.SIGNED_KEYWORD;
          }
        case 157: break;
        case 28: 
          { return CTokenType.SEMICOLON;
          }
        case 158: break;
        case 66: 
          { return CTokenType.CONST_KEYWORD;
          }
        case 159: break;
        case 23: 
          { return CTokenType.RPARENTH;
          }
        case 160: break;
        case 15: 
          { return CTokenType.EQ;
          }
        case 161: break;
        case 6: 
          { return CTokenType.ASTERISK;
          }
        case 162: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
