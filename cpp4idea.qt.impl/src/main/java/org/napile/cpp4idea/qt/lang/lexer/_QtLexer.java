/* The following code was generated by JFlex 1.4.3 on 29.12.12 13:25 */

/* It's an automatically generated code. Do not modify it. */
package org.napile.cpp4idea.qt.lang.lexer;

import org.napile.cpp4idea.lang.psi.CTokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29.12.12 13:25 from the specification file
 * <tt>I:/github.com/VISTALL/cpp4idea/cpp4idea.qt.impl/src/main/java/org/napile/cpp4idea/qt/lang/lexer/QtLexer.flex</tt>
 */
public class _QtLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\1\1\2\1\0\1\1\1\7\16\4\4\0\1\1\1\67"+
    "\1\31\1\34\1\3\1\74\1\72\1\27\1\75\1\76\1\6\1\71"+
    "\1\104\1\25\1\23\1\5\1\15\1\14\2\12\1\65\1\12\1\64"+
    "\1\12\2\10\1\107\1\103\1\32\1\66\1\33\1\106\1\110\1\13"+
    "\1\17\1\13\1\22\1\24\1\21\5\3\1\20\3\3\1\26\7\3"+
    "\1\16\2\3\1\101\1\30\1\102\1\73\1\11\1\0\1\47\1\45"+
    "\1\37\1\42\1\43\1\44\1\54\1\60\1\35\1\3\1\50\1\40"+
    "\1\61\1\36\1\52\1\56\1\3\1\46\1\51\1\53\1\41\1\57"+
    "\1\55\1\63\1\62\1\3\1\77\1\70\1\100\1\105\41\4\2\0"+
    "\4\3\4\0\1\3\2\0\1\4\7\0\1\3\4\0\1\3\5\0"+
    "\27\3\1\0\37\3\1\0\u013f\3\31\0\162\3\4\0\14\3\16\0"+
    "\5\3\11\0\1\3\21\0\130\4\5\0\23\4\12\0\1\3\13\0"+
    "\1\3\1\0\3\3\1\0\1\3\1\0\24\3\1\0\54\3\1\0"+
    "\46\3\1\0\5\3\4\0\202\3\1\0\4\4\3\0\105\3\1\0"+
    "\46\3\2\0\2\3\6\0\20\3\41\0\46\3\2\0\1\3\7\0"+
    "\47\3\11\0\21\4\1\0\27\4\1\0\3\4\1\0\1\4\1\0"+
    "\2\4\1\0\1\4\13\0\33\3\5\0\3\3\15\0\4\4\14\0"+
    "\6\4\13\0\32\3\5\0\13\3\16\4\7\0\12\4\4\0\2\3"+
    "\1\4\143\3\1\0\1\3\10\4\1\0\6\4\2\3\2\4\1\0"+
    "\4\4\2\3\12\4\3\3\2\0\1\3\17\0\1\4\1\3\1\4"+
    "\36\3\33\4\2\0\3\3\60\0\46\3\13\4\1\3\u014f\0\3\4"+
    "\66\3\2\0\1\4\1\3\20\4\2\0\1\3\4\4\3\0\12\3"+
    "\2\4\2\0\12\4\21\0\3\4\1\0\10\3\2\0\2\3\2\0"+
    "\26\3\1\0\7\3\1\0\1\3\3\0\4\3\2\0\1\4\1\3"+
    "\7\4\2\0\2\4\2\0\3\4\11\0\1\4\4\0\2\3\1\0"+
    "\3\3\2\4\2\0\12\4\4\3\15\0\3\4\1\0\6\3\4\0"+
    "\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0\2\3\1\0"+
    "\2\3\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4\13\0"+
    "\4\3\1\0\1\3\7\0\14\4\3\3\14\0\3\4\1\0\11\3"+
    "\1\0\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3"+
    "\2\0\1\4\1\3\10\4\1\0\3\4\1\0\3\4\2\0\1\3"+
    "\17\0\2\3\2\4\2\0\12\4\1\0\1\3\17\0\3\4\1\0"+
    "\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0"+
    "\5\3\2\0\1\4\1\3\6\4\3\0\2\4\2\0\3\4\10\0"+
    "\2\4\4\0\2\3\1\0\3\3\4\0\12\4\1\0\1\3\20\0"+
    "\1\4\1\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3"+
    "\1\0\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0\10\3"+
    "\1\0\3\3\4\0\5\4\3\0\3\4\1\0\4\4\11\0\1\4"+
    "\17\0\11\4\11\0\1\3\7\0\3\4\1\0\10\3\1\0\3\3"+
    "\1\0\27\3\1\0\12\3\1\0\5\3\4\0\7\4\1\0\3\4"+
    "\1\0\4\4\7\0\2\4\11\0\2\3\4\0\12\4\22\0\2\4"+
    "\1\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3"+
    "\2\0\1\4\1\3\7\4\1\0\3\4\1\0\4\4\7\0\2\4"+
    "\7\0\1\3\1\0\2\3\4\0\12\4\22\0\2\4\1\0\10\3"+
    "\1\0\3\3\1\0\27\3\1\0\20\3\4\0\6\4\2\0\3\4"+
    "\1\0\4\4\11\0\1\4\10\0\2\3\4\0\12\4\22\0\2\4"+
    "\1\0\22\3\3\0\30\3\1\0\11\3\1\0\1\3\2\0\7\3"+
    "\3\0\1\4\4\0\6\4\1\0\1\4\1\0\10\4\22\0\2\4"+
    "\15\0\60\3\1\4\2\3\7\4\4\0\10\3\10\4\1\0\12\4"+
    "\47\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3"+
    "\6\0\4\3\1\0\7\3\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\2\0\2\3\1\0\4\3\1\4\2\3\6\4\1\0\2\4\1\3"+
    "\2\0\5\3\1\0\1\3\1\0\6\4\2\0\12\4\2\0\2\3"+
    "\42\0\1\3\27\0\2\4\6\0\12\4\13\0\1\4\1\0\1\4"+
    "\1\0\1\4\4\0\2\4\10\3\1\0\42\3\6\0\24\4\1\0"+
    "\2\4\4\3\4\0\10\4\1\0\44\4\11\0\1\4\71\0\42\3"+
    "\1\0\5\3\1\0\2\3\1\0\7\4\3\0\4\4\6\0\12\4"+
    "\6\0\6\3\4\4\106\0\46\3\12\0\51\3\7\0\132\3\5\0"+
    "\104\3\5\0\122\3\6\0\7\3\1\0\77\3\1\0\1\3\1\0"+
    "\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\47\3\1\0"+
    "\1\3\1\0\4\3\2\0\37\3\1\0\1\3\1\0\4\3\2\0"+
    "\7\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0\7\3\1\0"+
    "\27\3\1\0\37\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0"+
    "\47\3\1\0\23\3\16\0\11\4\56\0\125\3\14\0\u026c\3\2\0"+
    "\10\3\12\0\32\3\5\0\113\3\3\0\3\3\17\0\15\3\1\0"+
    "\4\3\3\4\13\0\22\3\3\4\13\0\22\3\2\4\14\0\15\3"+
    "\1\0\3\3\1\0\2\4\14\0\64\3\40\4\3\0\1\3\3\0"+
    "\2\3\1\4\2\0\12\4\41\0\3\4\2\0\12\4\6\0\130\3"+
    "\10\0\51\3\1\4\126\0\35\3\3\0\14\4\4\0\14\4\12\0"+
    "\12\4\36\3\2\0\5\3\u038b\0\154\3\224\0\234\3\4\0\132\3"+
    "\6\0\26\3\2\0\6\3\2\0\46\3\2\0\6\3\2\0\10\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\37\3\2\0\65\3"+
    "\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3\3\0\4\3"+
    "\2\0\6\3\4\0\15\3\5\0\3\3\1\0\7\3\17\0\4\4"+
    "\32\0\5\4\20\0\2\3\23\0\1\3\13\0\4\4\6\0\6\4"+
    "\1\0\1\3\15\0\1\3\40\0\22\3\36\0\15\4\4\0\1\4"+
    "\3\0\6\4\27\0\1\3\4\0\1\3\2\0\12\3\1\0\1\3"+
    "\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0\4\3"+
    "\1\0\3\3\1\0\7\3\3\0\3\3\5\0\5\3\26\0\44\3"+
    "\u0e81\0\3\3\31\0\11\3\6\4\1\0\5\3\2\0\5\3\4\0"+
    "\126\3\2\0\2\4\2\0\3\3\1\0\137\3\5\0\50\3\4\0"+
    "\136\3\21\0\30\3\70\0\20\3\u0200\0\u19b6\3\112\0\u51a6\3\132\0"+
    "\u048d\3\u0773\0\u2ba4\3\u215c\0\u012e\3\2\0\73\3\225\0\7\3\14\0"+
    "\5\3\5\0\1\3\1\4\12\3\1\0\15\3\1\0\5\3\1\0"+
    "\1\3\1\0\2\3\1\0\2\3\1\0\154\3\41\0\u016b\3\22\0"+
    "\100\3\2\0\66\3\50\0\15\3\3\0\20\4\20\0\4\4\17\0"+
    "\2\3\30\0\3\3\31\0\1\3\6\0\5\3\1\0\207\3\2\0"+
    "\1\4\4\0\1\3\13\0\12\4\7\0\32\3\4\0\1\3\1\0"+
    "\32\3\12\0\132\3\3\0\6\3\2\0\6\3\2\0\6\3\2\0"+
    "\3\3\3\0\2\3\3\0\2\3\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\20\4\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\0\1\46\1\47\3\50\1\4\2\0"+
    "\3\7\1\50\1\0\1\51\1\52\1\53\2\12\2\14"+
    "\2\54\1\55\1\56\3\0\1\4\1\57\11\4\1\60"+
    "\20\4\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\2\43\2\50\1\4\2\0"+
    "\1\7\1\46\1\0\1\7\1\0\1\74\1\75\4\0"+
    "\1\76\1\77\13\4\1\100\14\4\2\0\1\4\3\0"+
    "\1\50\7\0\2\4\1\101\2\4\1\102\1\103\2\4"+
    "\1\104\1\105\2\4\1\106\5\4\1\107\3\4\1\110"+
    "\1\4\3\0\1\47\1\50\5\0\1\4\1\111\1\112"+
    "\4\4\1\113\5\4\1\114\3\4\2\0\1\115\1\0"+
    "\1\116\4\4\1\117\1\120\1\121\1\122\1\123\1\4"+
    "\1\124\1\4\1\125\1\0\1\126\1\127\3\4\1\130"+
    "\1\131\1\132\1\133\1\4\1\134\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\111\0\333\0\u0124\0\u016d\0\u01b6"+
    "\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\111\0\u036c\0\u03b5"+
    "\0\111\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4"+
    "\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc"+
    "\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44"+
    "\0\u0a8d\0\111\0\111\0\111\0\111\0\111\0\111\0\111"+
    "\0\111\0\111\0\111\0\u0ad6\0\111\0\u0b1f\0\u0b68\0\111"+
    "\0\111\0\u0bb1\0\111\0\111\0\111\0\u0bfa\0\u0c43\0\u0c8c"+
    "\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\111"+
    "\0\111\0\111\0\111\0\u0ed4\0\u0f1d\0\111\0\u0f66\0\u0faf"+
    "\0\u0ff8\0\u0f66\0\u1041\0\u108a\0\u10d3\0\u111c\0\333\0\u1165"+
    "\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad"+
    "\0\333\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac"+
    "\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4"+
    "\0\u183d\0\111\0\111\0\111\0\111\0\111\0\111\0\111"+
    "\0\111\0\111\0\111\0\111\0\u1886\0\111\0\u18cf\0\u1918"+
    "\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u19f3\0\u1a85\0\u1ace\0\u1b17"+
    "\0\111\0\111\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\333\0\333"+
    "\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83"+
    "\0\u1ecc\0\u1f15\0\u1f5e\0\333\0\u1fa7\0\u1ff0\0\u2039\0\u2082"+
    "\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca"+
    "\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512"+
    "\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a"+
    "\0\333\0\u27a3\0\u27ec\0\333\0\333\0\u2835\0\u287e\0\333"+
    "\0\333\0\u28c7\0\u2910\0\333\0\u2959\0\u29a2\0\u29eb\0\u2a34"+
    "\0\u2a7d\0\333\0\u2ac6\0\u2b0f\0\u2b58\0\333\0\u2ba1\0\u2bea"+
    "\0\u2c33\0\u2c7c\0\u23ee\0\u23ee\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0"+
    "\0\u2de9\0\u2e32\0\333\0\333\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56"+
    "\0\333\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\333\0\u310c"+
    "\0\u3155\0\u319e\0\u31e7\0\u3230\0\111\0\u3279\0\111\0\u32c2"+
    "\0\u330b\0\u3354\0\u339d\0\333\0\333\0\333\0\333\0\333"+
    "\0\u33e6\0\333\0\u342f\0\333\0\u3478\0\111\0\111\0\u34c1"+
    "\0\u350a\0\u3553\0\333\0\333\0\333\0\111\0\u359c\0\333"+
    "\0\333\0\333";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\3"+
    "\1\10\1\11\1\10\1\5\1\10\1\12\5\5\1\13"+
    "\1\5\1\14\1\5\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\5\1\35\1\5\1\36\1\37"+
    "\1\40\1\41\1\42\4\5\2\10\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\112\0\1\3\5\0\1\3\104\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\31\5\30\0\1\66"+
    "\1\67\57\0\1\70\110\0\1\71\32\0\1\10\1\72"+
    "\1\10\1\0\2\10\2\0\1\73\1\74\1\75\1\76"+
    "\1\77\13\0\1\73\1\0\1\75\1\77\1\74\17\0"+
    "\2\10\26\0\2\5\3\0\1\5\1\100\11\5\1\0"+
    "\1\5\1\0\1\5\6\0\31\5\33\0\1\101\1\102"+
    "\1\103\1\0\2\103\1\104\1\105\1\73\1\74\1\75"+
    "\1\76\1\77\13\0\1\73\1\0\1\75\1\77\1\74"+
    "\1\105\15\0\1\104\2\103\33\0\1\106\1\0\1\106"+
    "\1\0\2\106\5\0\1\107\40\0\2\106\50\0\1\110"+
    "\5\0\1\111\32\0\1\112\22\0\2\15\1\0\4\15"+
    "\1\0\17\15\1\113\1\114\60\15\2\17\1\0\4\17"+
    "\1\0\20\17\1\115\1\116\57\17\2\117\1\0\4\117"+
    "\1\0\20\117\1\120\1\117\1\121\33\117\1\122\22\117"+
    "\35\0\1\123\4\0\1\124\1\125\50\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\1\5\1\126"+
    "\5\5\1\127\21\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\6\5\1\130\3\5\1\131"+
    "\16\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\3\5\1\132\6\5\1\133\2\5\1\134"+
    "\5\5\1\135\5\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\15\5\1\136\13\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\1\5\1\137\27\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\6\5\1\140\6\5\1\141"+
    "\13\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\1\5\1\142\1\5\1\143\22\5\1\144"+
    "\2\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\15\5\1\145\13\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\11\5\1\146"+
    "\3\5\1\147\13\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\6\5\1\150\22\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\1\151\15\5\1\152\1\5\1\153\10\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\25\5"+
    "\1\154\3\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\15\5\1\155\13\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\23\5"+
    "\1\156\5\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\4\5\1\157\4\5\1\160\17\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\15\5\1\161\13\5\111\0\1\162\110\0\1\163"+
    "\110\0\1\164\1\0\1\165\106\0\1\166\2\0\1\167"+
    "\105\0\1\170\3\0\1\171\104\0\1\172\110\0\1\173"+
    "\131\0\1\174\1\0\2\66\1\0\4\66\1\0\101\66"+
    "\5\175\1\176\1\67\102\175\10\0\1\10\1\72\1\10"+
    "\1\0\2\10\46\0\2\10\33\0\1\106\1\0\1\106"+
    "\1\0\2\106\3\0\1\74\1\75\1\0\1\77\15\0"+
    "\1\75\1\77\1\74\17\0\2\106\33\0\1\177\1\0"+
    "\1\177\1\0\2\177\3\0\1\74\1\75\2\0\1\200"+
    "\14\0\1\75\1\0\1\74\17\0\2\177\3\0\1\200"+
    "\22\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\1\201\30\5\33\0\1\101\1\202\1\101\1\0"+
    "\2\101\3\0\1\74\1\75\1\76\1\77\15\0\1\75"+
    "\1\77\1\74\17\0\2\101\33\0\1\101\1\102\1\103"+
    "\1\0\2\103\46\0\2\103\33\0\1\101\1\102\1\103"+
    "\1\0\2\103\2\0\1\73\1\74\1\75\1\76\1\77"+
    "\13\0\1\73\1\0\1\75\1\77\1\74\17\0\2\103"+
    "\23\0\2\203\1\0\5\203\1\204\1\203\4\204\1\203"+
    "\1\204\1\205\2\204\1\203\1\204\1\203\1\206\10\203"+
    "\1\204\1\205\1\203\4\204\1\203\1\204\6\203\1\206"+
    "\5\203\2\204\23\203\14\0\2\207\2\0\1\73\17\0"+
    "\1\73\60\0\1\106\1\210\1\106\1\0\2\106\3\0"+
    "\1\74\1\75\1\0\1\77\15\0\1\75\1\77\1\74"+
    "\17\0\2\106\46\0\1\211\65\0\2\15\1\0\4\15"+
    "\1\0\101\15\2\17\1\0\4\17\1\0\101\17\2\117"+
    "\1\0\4\117\1\0\20\117\1\120\1\117\1\0\60\117"+
    "\1\0\4\117\1\0\101\117\66\0\1\212\60\0\1\213"+
    "\5\0\1\214\107\0\1\215\103\0\1\216\55\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\16\5"+
    "\1\217\12\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\20\5\1\220\10\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\24\5"+
    "\1\221\4\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\12\5\1\222\16\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\14\5"+
    "\1\223\14\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\1\5\1\224\27\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\12\5"+
    "\1\225\16\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\1\5\1\226\27\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\14\5"+
    "\1\227\14\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\7\5\1\230\21\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\4\5"+
    "\1\231\24\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\14\5\1\232\14\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\16\5"+
    "\1\233\12\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\11\5\1\234\17\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\6\5"+
    "\1\235\22\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\15\5\1\236\13\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\16\5"+
    "\1\237\12\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\17\5\1\240\11\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\12\5"+
    "\1\241\16\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\1\242\30\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\21\5\1\243"+
    "\7\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\16\5\1\244\12\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\1\245\30\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\10\5\1\246\20\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\247\30\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\1\250\30\5\23\0\6\175\1\251\102\175\10\0\1\177"+
    "\1\252\1\177\1\0\2\177\3\0\1\74\1\75\17\0"+
    "\1\75\1\0\1\74\17\0\2\177\33\0\1\177\1\0"+
    "\1\177\1\0\2\177\3\0\1\74\1\75\17\0\1\75"+
    "\1\0\1\74\17\0\2\177\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\5\1\253\27\5"+
    "\33\0\1\101\1\202\1\101\1\0\2\101\46\0\2\101"+
    "\33\0\1\254\1\0\4\254\1\0\1\254\1\0\2\254"+
    "\1\0\1\254\1\0\1\255\10\0\1\254\2\0\4\254"+
    "\1\0\1\254\6\0\1\255\5\0\2\254\23\0\2\203"+
    "\1\0\5\203\1\204\1\256\4\204\1\203\1\204\1\205"+
    "\2\204\1\203\1\204\1\203\1\206\10\203\1\204\1\205"+
    "\1\203\4\204\1\203\1\204\6\203\1\206\5\203\2\204"+
    "\23\203\10\0\1\257\1\0\1\257\1\254\2\257\1\0"+
    "\1\254\1\0\2\254\1\0\1\254\1\260\1\255\10\0"+
    "\1\254\2\0\4\254\1\0\1\254\6\0\1\255\5\0"+
    "\2\257\3\0\1\260\30\0\1\261\2\0\2\207\2\0"+
    "\1\73\17\0\1\73\60\0\1\106\1\210\1\106\1\0"+
    "\2\106\46\0\2\106\62\0\1\262\107\0\1\263\3\0"+
    "\1\264\112\0\1\265\106\0\1\266\51\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\6\5\1\267"+
    "\22\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\14\5\1\270\14\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\6\5\1\271"+
    "\22\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\14\5\1\272\1\5\1\273\12\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\11\5\1\274\17\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\17\5\1\275\11\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\1\276\30\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\12\5\1\277\16\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\24\5"+
    "\1\300\4\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\6\5\1\301\22\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\6\5"+
    "\1\302\22\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\12\5\1\303\16\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\3\5"+
    "\1\304\25\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\4\5\1\305\24\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\1\5"+
    "\1\306\27\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\16\5\1\307\12\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\16\5"+
    "\1\310\12\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\6\5\1\311\22\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\15\5"+
    "\1\312\13\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\3\5\1\313\25\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\3\5"+
    "\1\314\25\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\22\5\1\315\6\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\5\5"+
    "\1\316\23\5\23\0\5\175\1\176\1\251\102\175\10\0"+
    "\1\177\1\252\1\177\1\0\2\177\46\0\2\177\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\16\5\1\317\12\5\33\0\1\254\1\320\4\254\1\0"+
    "\1\254\1\0\2\254\1\0\1\254\1\0\1\255\10\0"+
    "\1\254\2\0\4\254\1\0\1\254\6\0\1\255\5\0"+
    "\2\254\33\0\1\177\1\0\1\177\1\0\2\177\7\0"+
    "\1\260\36\0\2\177\3\0\1\260\27\0\1\204\1\321"+
    "\4\204\1\0\1\204\1\0\2\204\1\0\1\204\1\0"+
    "\1\255\10\0\1\204\2\0\4\204\1\0\1\204\6\0"+
    "\1\255\5\0\2\204\33\0\1\257\1\322\1\257\1\254"+
    "\2\257\1\0\1\254\1\0\1\323\1\324\1\0\1\254"+
    "\1\0\1\255\10\0\1\254\2\0\1\324\1\254\1\323"+
    "\1\254\1\0\1\254\6\0\1\255\5\0\2\257\33\0"+
    "\1\177\1\0\1\177\1\0\2\177\46\0\2\177\34\0"+
    "\1\261\2\0\2\207\133\0\1\325\112\0\1\326\111\0"+
    "\1\327\102\0\1\330\110\0\1\331\56\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\14\5\1\332"+
    "\14\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\14\5\1\333\14\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\16\5\1\334"+
    "\12\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\1\335\30\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\17\5\1\336\11\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\4\5\1\337\24\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\11\5\1\340\17\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\13\5\1\341\15\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\11\5\1\342\17\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\6\5\1\343\22\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\344\30\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\2\5\1\345\26\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\5\5\1\346\23\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\6\5\1\347\22\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\1\350\30\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\6\0\12\5"+
    "\1\351\16\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\6\0\27\5\1\352\1\5\33\0\1\254"+
    "\1\320\4\254\1\0\1\254\1\0\2\254\1\0\1\254"+
    "\12\0\1\254\2\0\4\254\1\0\1\254\14\0\2\254"+
    "\33\0\1\204\1\321\4\204\1\0\1\204\1\0\2\204"+
    "\1\0\1\204\12\0\1\204\2\0\4\204\1\0\1\204"+
    "\14\0\2\204\33\0\1\257\1\322\1\257\1\254\2\257"+
    "\1\0\1\254\1\0\2\254\1\0\1\254\12\0\1\254"+
    "\2\0\4\254\1\0\1\254\14\0\2\257\64\0\1\353"+
    "\112\0\1\354\111\0\1\355\102\0\1\356\116\0\1\357"+
    "\47\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\21\5\1\360\7\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\5\1\361\27\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\1\5\1\362\27\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\3\5\1\363\25\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\1\5\1\364\27\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\1\5\1\365\27\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\5\5\1\366\23\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\2\5\1\367\26\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\23\5\1\370\5\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\6\5\1\371\22\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\2\5\1\372\26\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\6\0\16\5\1\373\12\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\6\0\30\5\1\374\65\0\1\375\112\0\1\376\107\0"+
    "\1\377\50\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\12\5\1\u0100\16\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\4\5\1\u0101"+
    "\24\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\6\5\1\u0102\22\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\16\5\1\u0103"+
    "\12\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\6\0\7\5\1\u0104\21\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\6\0\6\5\1\u0105"+
    "\22\5\66\0\1\u0106\50\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\2\5\1\u0107\26\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\6\5\1\u0108\22\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\6\0\5\5\1\u0109\23\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\6\0"+
    "\6\5\1\u010a\22\5\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13797];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\11\1\1\11\2\1\1\11"+
    "\30\1\12\11\1\1\1\11\2\1\2\11\1\0\3\11"+
    "\3\1\2\0\4\1\1\0\4\11\2\1\1\11\4\1"+
    "\3\0\34\1\13\11\1\1\1\11\3\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\11\4\0\32\1\2\0\1\1"+
    "\3\0\1\1\7\0\31\1\3\0\2\1\5\0\21\1"+
    "\2\0\1\11\1\0\1\11\15\1\1\0\2\11\6\1"+
    "\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _QtLexer(){
    this((java.io.Reader)null);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }


  public _QtLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _QtLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1796) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { return CTokens.ASTERISKEQ;
          }
        case 95: break;
        case 82: 
          { return CTokens.STATIC_KEYWORD;
          }
        case 96: break;
        case 61: 
          { return CTokens.LTLTEQ;
          }
        case 97: break;
        case 88: 
          { return CTokens.DEFAULT_KEYWORD;
          }
        case 98: break;
        case 29: 
          { return CTokens.COMMA;
          }
        case 99: break;
        case 39: 
          { return CTokens.FLOAT_LITERAL;
          }
        case 100: break;
        case 83: 
          { return CTokens.SWITCH_KEYWORD;
          }
        case 101: break;
        case 77: 
          { return CTokens.S_IFDEF_KEYWORD;
          }
        case 102: break;
        case 44: 
          { return CTokens.STRING_INCLUDE_LITERAL;
          }
        case 103: break;
        case 40: 
          { return CTokens.DOUBLE_LITERAL;
          }
        case 104: break;
        case 47: 
          { return CTokens.IF_KEYWORD;
          }
        case 105: break;
        case 64: 
          { return CTokens.FOR_KEYWORD;
          }
        case 106: break;
        case 57: 
          { return CTokens.XOREQ;
          }
        case 107: break;
        case 71: 
          { return CTokens.GOTO_KEYWORD;
          }
        case 108: break;
        case 73: 
          { return CTokens.CLASS_KEYWORD;
          }
        case 109: break;
        case 22: 
          { return CTokens.LPARENTH;
          }
        case 110: break;
        case 89: 
          { return CTokens.TYPEDEF_KEYWORD;
          }
        case 111: break;
        case 12: 
          { return CTokens.STRING_LITERAL;
          }
        case 112: break;
        case 90: 
          { return CTokens.PRIVATE_KEYWORD;
          }
        case 113: break;
        case 10: 
          { return CTokens.CHARACTER_LITERAL;
          }
        case 114: break;
        case 18: 
          { return CTokens.PLUS;
          }
        case 115: break;
        case 72: 
          { return CTokens.VOID_KEYWORD;
          }
        case 116: break;
        case 49: 
          { return CTokens.EQEQ;
          }
        case 117: break;
        case 36: 
          { return CTokens.DIVEQ;
          }
        case 118: break;
        case 38: 
          { return CTokens.LONG_LITERAL;
          }
        case 119: break;
        case 4: 
          { return CTokens.IDENTIFIER;
          }
        case 120: break;
        case 91: 
          { return CTokens.S_INCLUDE_KEYWORD;
          }
        case 121: break;
        case 92: 
          { return CTokens.CONTINUE_KEYWORD;
          }
        case 122: break;
        case 3: 
          { return CTokens.NEW_LINE;
          }
        case 123: break;
        case 34: 
          { return CTokens.END_OF_LINE_COMMENT;
          }
        case 124: break;
        case 45: 
          { return CTokens.LTLT;
          }
        case 125: break;
        case 16: 
          { return CTokens.EXCL;
          }
        case 126: break;
        case 1: 
          { return CTokens.BAD_CHARACTER;
          }
        case 127: break;
        case 60: 
          { return CTokens.ELLIPSIS;
          }
        case 128: break;
        case 13: 
          { return CTokens.LT;
          }
        case 129: break;
        case 53: 
          { return CTokens.PLUSEQ;
          }
        case 130: break;
        case 55: 
          { return CTokens.ANDEQ;
          }
        case 131: break;
        case 58: 
          { return CTokens.PERCEQ;
          }
        case 132: break;
        case 68: 
          { return CTokens.ENUM_KEYWORD;
          }
        case 133: break;
        case 51: 
          { return CTokens.OREQ;
          }
        case 134: break;
        case 2: 
          { return CTokens.WHITE_SPACE;
          }
        case 135: break;
        case 65: 
          { return CTokens.CASE_KEYWORD;
          }
        case 136: break;
        case 75: 
          { return CTokens.BREAK_KEYWORD;
          }
        case 137: break;
        case 87: 
          { return CTokens.S_DEFINE_KEYWORD;
          }
        case 138: break;
        case 30: 
          { return CTokens.TILDE;
          }
        case 139: break;
        case 14: 
          { return CTokens.GT;
          }
        case 140: break;
        case 19: 
          { return CTokens.AND;
          }
        case 141: break;
        case 7: 
          { return CTokens.INTEGER_LITERAL;
          }
        case 142: break;
        case 62: 
          { return CTokens.INT_KEYWORD;
          }
        case 143: break;
        case 93: 
          { return CTokens.UNSIGNED_KEYWORD;
          }
        case 144: break;
        case 70: 
          { return CTokens.BOOL_KEYWORD;
          }
        case 145: break;
        case 17: 
          { return CTokens.OR;
          }
        case 146: break;
        case 25: 
          { return CTokens.RBRACE;
          }
        case 147: break;
        case 59: 
          { return CTokens.DOUBLE_COLON;
          }
        case 148: break;
        case 24: 
          { return CTokens.LBRACE;
          }
        case 149: break;
        case 9: 
          { return CTokens.MINUS;
          }
        case 150: break;
        case 94: 
          { return CTokens.NAMESPACE_KEYWORD;
          }
        case 151: break;
        case 80: 
          { return CTokens.RETURN_KEYWORD;
          }
        case 152: break;
        case 67: 
          { return CTokens.LONG_KEYWORD;
          }
        case 153: break;
        case 31: 
          { return CTokens.QUEST;
          }
        case 154: break;
        case 41: 
          { return CTokens.MINUSMINUS;
          }
        case 155: break;
        case 33: 
          { return CTokens.AT;
          }
        case 156: break;
        case 27: 
          { return CTokens.RBRACKET;
          }
        case 157: break;
        case 42: 
          { return CTokens.ARROW;
          }
        case 158: break;
        case 76: 
          { return CTokens.WHILE_KEYWORD;
          }
        case 159: break;
        case 63: 
          { return CTokens.NEW_KEYWORD;
          }
        case 160: break;
        case 50: 
          { return CTokens.NE;
          }
        case 161: break;
        case 21: 
          { return CTokens.PERC;
          }
        case 162: break;
        case 78: 
          { return CTokens.S_ENDIF_KEYWORD;
          }
        case 163: break;
        case 46: 
          { return CTokens.LE;
          }
        case 164: break;
        case 20: 
          { return CTokens.XOR;
          }
        case 165: break;
        case 5: 
          { return CTokens.DIV;
          }
        case 166: break;
        case 85: 
          { return CTokens.__INT64_KEYWORD;
          }
        case 167: break;
        case 54: 
          { return CTokens.PLUSPLUS;
          }
        case 168: break;
        case 43: 
          { return CTokens.MINUSEQ;
          }
        case 169: break;
        case 84: 
          { return CTokens.PUBLIC_KEYWORD;
          }
        case 170: break;
        case 35: 
          { return CTokens.C_STYLE_COMMENT;
          }
        case 171: break;
        case 48: 
          { return CTokens.DO_KEYWORD;
          }
        case 172: break;
        case 79: 
          { return CTokens.EXTERN_KEYWORD;
          }
        case 173: break;
        case 11: 
          { return CTokens.NEXT_LINE;
          }
        case 174: break;
        case 56: 
          { return CTokens.ANDAND;
          }
        case 175: break;
        case 26: 
          { return CTokens.LBRACKET;
          }
        case 176: break;
        case 32: 
          { return CTokens.COLON;
          }
        case 177: break;
        case 66: 
          { return CTokens.CHAR_KEYWORD;
          }
        case 178: break;
        case 52: 
          { return CTokens.OROR;
          }
        case 179: break;
        case 69: 
          { return CTokens.ELSE_KEYWORD;
          }
        case 180: break;
        case 8: 
          { return CTokens.DOT;
          }
        case 181: break;
        case 86: 
          { return CTokens.S_IFNDEF_KEYWORD;
          }
        case 182: break;
        case 81: 
          { return CTokens.SIGNED_KEYWORD;
          }
        case 183: break;
        case 28: 
          { return CTokens.SEMICOLON;
          }
        case 184: break;
        case 74: 
          { return CTokens.CONST_KEYWORD;
          }
        case 185: break;
        case 23: 
          { return CTokens.RPARENTH;
          }
        case 186: break;
        case 15: 
          { return CTokens.EQ;
          }
        case 187: break;
        case 6: 
          { return CTokens.ASTERISK;
          }
        case 188: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
