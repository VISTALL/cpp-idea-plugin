/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package org.napile.cpp4idea.lang.lexer;

import org.napile.cpp4idea.lang.psi.CPsiTokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_CppLexer.flex</tt>
 */
public class _CppLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17424 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24"+
    "\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\3\0\1\56\1\57\13\24\1\60\1\47\1\61"+
    "\1\62\1\0\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70\1\30\1\0\1"+
    "\71\3\24\1\55\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76\1\24\1\51"+
    "\6\30\2\24\1\33\1\77\2\30\1\100\5\0\1\101\6\24\1\102\2\0\1\103\1\24\1\104"+
    "\1\0\1\43\1\24\1\105\1\106\1\107\2\24\1\110\1\111\1\112\1\113\1\114\1\64\1"+
    "\115\1\104\1\0\1\116\1\117\1\120\1\121\1\107\2\24\1\110\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\0\1\131\1\30\1\120\1\40\1\37\2\24\1\110\1\132\1"+
    "\112\1\47\1\133\1\134\1\30\1\104\1\0\1\44\1\135\1\120\1\106\1\107\2\24\1\110"+
    "\1\132\1\112\1\113\1\125\1\130\1\115\1\104\1\0\1\44\1\30\1\136\1\137\1\140"+
    "\1\141\1\117\1\137\1\24\1\142\1\143\1\144\1\145\1\30\1\130\1\0\1\30\1\44\1"+
    "\146\1\33\1\110\2\24\1\110\1\24\1\147\1\150\1\144\1\151\1\51\1\104\1\0\2\30"+
    "\1\105\1\33\1\110\2\24\1\110\1\152\1\112\1\150\1\144\1\151\1\35\1\104\1\0"+
    "\1\153\1\30\1\146\1\33\1\110\4\24\1\154\1\150\1\155\1\156\1\45\1\104\1\0\1"+
    "\30\1\42\1\157\1\24\1\25\1\42\2\24\1\37\1\160\1\25\1\161\1\162\1\0\1\130\1"+
    "\0\1\163\1\30\1\43\5\24\1\164\1\165\1\166\1\167\1\0\1\170\4\30\1\171\1\172"+
    "\1\173\1\43\1\174\1\175\1\164\1\176\1\177\1\52\1\0\1\200\4\30\1\134\2\30\1"+
    "\170\1\0\1\170\1\201\1\202\1\24\1\43\3\24\1\31\1\46\1\0\1\150\1\203\1\0\1"+
    "\46\3\0\1\204\1\205\7\30\5\24\1\55\1\0\1\206\1\0\1\170\1\67\1\207\1\210\1"+
    "\211\1\212\1\24\1\213\1\214\1\0\1\52\4\24\1\40\1\22\5\24\1\215\51\24\1\140"+
    "\1\25\1\140\5\24\1\140\4\24\1\140\1\25\1\140\1\24\1\25\7\24\1\140\10\24\1"+
    "\216\4\30\2\24\2\30\12\24\2\77\1\43\114\24\1\106\2\24\1\43\2\24\1\51\11\24"+
    "\1\137\1\24\1\134\1\24\1\33\1\217\1\30\2\24\1\217\1\30\2\24\1\220\1\30\1\24"+
    "\1\33\1\221\1\30\6\24\1\222\3\0\1\223\1\224\1\0\1\170\3\30\1\225\1\0\1\170"+
    "\13\24\1\30\1\226\4\24\1\227\10\24\1\77\1\30\3\24\1\25\1\0\1\2\1\0\1\2\1\130"+
    "\1\0\3\24\1\77\1\31\1\30\5\24\1\116\3\24\1\27\1\0\1\170\4\30\2\24\1\166\1"+
    "\2\6\24\1\203\1\167\3\0\1\113\1\0\1\170\1\0\1\170\1\45\1\30\1\0\1\52\10\30"+
    "\1\230\5\24\1\222\1\0\1\230\1\116\1\0\1\170\1\30\1\231\1\2\1\30\1\232\3\24"+
    "\1\103\1\211\1\0\1\71\4\24\1\67\1\0\1\2\1\30\4\24\1\222\2\0\1\30\1\0\1\233"+
    "\1\0\1\71\3\24\1\77\1\24\1\134\10\30\1\234\2\0\1\235\1\236\1\170\30\24\7\0"+
    "\1\237\42\24\2\77\4\24\2\77\1\24\1\240\3\24\1\77\6\24\1\33\1\177\1\241\1\31"+
    "\1\242\1\116\1\24\1\31\1\241\1\31\1\30\1\231\3\30\1\243\1\30\1\45\1\134\1"+
    "\30\1\244\1\30\1\150\1\0\1\44\1\45\2\30\1\24\1\31\4\24\2\30\1\0\1\204\1\245"+
    "\1\0\1\246\1\30\1\247\1\42\1\160\1\250\1\32\1\251\1\24\1\252\1\253\1\254\2"+
    "\30\5\24\1\134\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1\255\1\256\1\30\4\24"+
    "\1\40\1\22\7\24\1\45\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1"+
    "\253\3\30\1\43\1\213\1\250\1\31\1\43\11\24\1\25\1\257\1\43\12\24\1\215\1\253"+
    "\4\24\1\25\1\43\12\24\1\25\2\30\3\24\1\51\6\30\170\24\1\77\11\30\75\24\1\51"+
    "\2\30\21\24\1\31\10\30\5\24\1\77\41\24\1\31\2\24\1\0\1\256\2\30\5\24\1\166"+
    "\1\100\1\260\3\24\1\67\12\24\1\170\3\30\1\45\1\24\1\42\14\24\1\107\3\24\1"+
    "\25\1\24\7\30\1\45\1\24\1\261\1\262\2\24\1\55\2\30\1\134\6\24\1\116\1\30\1"+
    "\71\5\24\1\222\1\0\1\52\1\30\1\0\1\170\2\0\1\71\1\263\1\0\1\71\2\24\1\67\1"+
    "\52\2\24\1\166\1\0\1\2\1\30\3\24\1\31\1\101\5\24\1\55\1\0\1\246\1\45\1\0\1"+
    "\170\1\264\1\24\1\0\1\265\5\24\1\103\1\167\1\30\1\262\1\266\1\0\1\170\2\24"+
    "\1\25\1\267\6\24\1\210\1\270\1\227\2\30\1\271\1\24\1\55\1\272\1\30\3\273\1"+
    "\30\2\25\5\24\1\215\1\77\1\30\16\24\1\55\1\274\1\0\1\170\64\24\1\116\1\30"+
    "\2\24\1\25\1\275\5\24\1\116\40\30\55\24\1\77\15\24\1\27\4\30\1\25\1\30\1\275"+
    "\1\276\1\24\1\110\1\25\1\177\1\277\15\24\1\27\3\30\1\275\54\24\1\77\2\30\10"+
    "\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\2\0\1\117\2\30\1\253\3\30\1\44\1\33"+
    "\20\24\1\300\1\244\1\30\1\0\1\170\1\43\2\24\1\121\1\43\2\24\1\51\1\301\12"+
    "\24\1\25\3\42\1\302\1\303\2\30\1\304\1\24\1\152\2\24\1\25\2\24\1\305\1\24"+
    "\1\77\1\24\1\77\4\30\17\24\1\51\10\30\6\24\1\31\20\30\1\306\20\30\3\24\1\31"+
    "\6\24\1\134\1\30\1\246\3\30\4\24\1\30\1\253\3\24\1\51\4\24\1\67\1\307\3\24"+
    "\1\77\4\24\1\116\1\24\1\250\5\30\23\24\1\77\1\0\1\170\4\24\1\116\4\24\1\116"+
    "\5\24\1\30\6\24\1\116\23\30\46\24\1\25\1\30\2\24\1\77\1\30\1\24\23\30\1\77"+
    "\1\110\4\24\1\40\1\310\2\24\1\77\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24"+
    "\1\311\1\30\2\24\1\77\1\30\3\24\1\27\10\30\7\24\1\301\10\30\1\312\1\100\1"+
    "\152\1\43\2\24\1\116\1\124\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\43\2\24\1"+
    "\313\3\30\6\24\1\77\1\30\2\24\1\77\1\30\2\24\1\51\1\30\2\24\1\27\15\30\11"+
    "\24\1\134\6\30\6\24\1\51\1\30\6\24\1\51\41\30\1\232\6\24\1\0\1\167\3\30\1"+
    "\130\1\0\1\30\1\64\1\232\5\24\1\0\1\314\2\30\3\24\1\134\1\0\1\170\1\232\3"+
    "\24\1\166\1\0\1\150\1\0\2\30\4\24\1\315\1\30\1\232\5\24\1\55\1\0\1\316\1\317"+
    "\1\0\1\320\4\30\2\24\1\37\2\24\1\222\1\0\1\205\10\30\1\25\1\251\1\24\1\40"+
    "\1\24\1\134\5\24\1\166\1\0\1\307\1\0\1\170\1\146\1\106\1\107\2\24\1\110\1"+
    "\132\1\112\1\113\1\125\1\145\1\253\1\104\2\204\21\30\6\24\1\203\1\0\1\206"+
    "\1\51\1\0\1\170\4\30\6\24\2\0\1\321\1\30\1\0\1\170\24\30\5\24\1\166\1\52\1"+
    "\0\1\246\2\30\1\266\4\30\6\24\2\0\1\322\1\30\1\0\1\170\4\30\5\24\1\55\1\0"+
    "\1\30\1\0\1\170\6\30\3\24\1\323\1\0\1\2\1\0\1\170\54\30\10\24\1\0\1\170\1"+
    "\30\1\45\40\30\1\103\1\232\4\24\1\55\1\324\1\64\1\30\1\103\1\101\4\24\1\242"+
    "\1\213\1\0\1\170\4\30\7\24\1\134\40\30\1\24\1\110\3\24\1\166\1\167\1\0\1\134"+
    "\1\30\1\0\1\170\2\30\1\42\3\24\1\325\2\0\1\46\1\167\11\30\1\25\1\37\4\24\1"+
    "\326\1\327\1\214\1\30\1\0\1\170\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30"+
    "\24\1\116\27\30\5\24\1\25\72\30\10\24\1\25\67\30\7\24\1\134\3\24\1\25\1\0"+
    "\1\170\14\30\3\24\1\77\1\204\1\30\6\24\1\167\1\30\1\116\1\30\1\0\1\170\1\275"+
    "\2\24\1\253\2\24\56\30\10\24\1\31\1\30\1\103\4\0\1\167\1\30\1\64\1\232\1\24"+
    "\10\30\1\27\3\30\75\24\1\31\2\30\36\24\1\51\41\30\43\24\1\25\12\30\61\24\1"+
    "\116\40\30\15\24\1\51\1\24\1\31\1\24\1\134\1\24\1\330\1\2\127\30\1\331\1\332"+
    "\2\0\1\333\1\2\3\30\1\334\22\30\1\317\67\30\12\24\1\33\10\24\1\33\1\335\1"+
    "\336\1\24\1\337\1\152\7\24\1\40\1\340\2\33\3\24\1\341\1\177\1\42\1\110\51"+
    "\24\1\77\3\24\1\110\2\24\1\215\3\24\1\215\2\24\1\33\3\24\1\33\2\24\1\25\3"+
    "\24\1\25\3\24\1\110\3\24\1\110\2\24\1\215\1\342\14\0\1\167\1\231\5\0\1\204"+
    "\1\306\1\30\1\343\2\30\1\231\1\46\1\0\52\30\1\167\2\0\1\344\1\345\1\307\72"+
    "\30\30\24\1\31\1\30\1\167\5\30\10\24\1\222\1\307\1\0\1\170\24\30\1\152\3\24"+
    "\1\171\1\43\1\215\1\346\1\247\1\347\1\171\1\240\1\171\2\215\1\127\1\24\1\37"+
    "\1\24\1\116\1\350\1\37\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33"+
    "\24\1\77\120\24\1\27\1\30\146\24\1\134\3\30\3\24\1\77\74\30\1\126\3\30\14"+
    "\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1864 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\3\1\1\1\6\1\26\1\27\1\6\6\3\4\0\1\1\1\66\1\33\1\0\1\2\1\75\1\73\1\31\1"+
    "\76\1\77\1\5\1\70\1\105\1\24\1\22\1\4\1\14\1\13\2\11\1\64\1\11\1\63\1\11\2"+
    "\7\1\110\1\104\1\72\1\65\1\71\1\107\1\111\1\12\1\16\1\12\1\21\1\23\1\20\5"+
    "\2\1\17\3\2\1\25\7\2\1\15\2\2\1\102\1\32\1\103\1\74\1\10\1\0\1\37\1\34\1\41"+
    "\1\51\1\36\1\52\1\53\1\57\1\47\1\2\1\40\1\43\1\60\1\45\1\44\1\55\1\2\1\35"+
    "\1\42\1\46\1\50\1\56\1\54\1\62\1\61\1\2\1\100\1\67\1\101\1\106\6\3\1\30\2"+
    "\3\2\0\4\2\4\0\1\2\2\0\1\3\7\0\1\2\4\0\1\2\5\0\17\2\1\0\2\2\4\0\4\2\16\0\5"+
    "\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3\2\1\0\1\2"+
    "\1\0\4\2\1\0\13\2\1\0\3\2\1\0\5\3\2\0\6\2\1\0\7\2\1\0\1\2\15\0\1\2\1\0\15"+
    "\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\1\3\3\2\5\0\6\3\5\0\1\2\4\0\3\3\1\0\1\3\3\0"+
    "\3\2\7\3\4\0\2\2\1\3\13\2\1\0\1\2\7\3\2\2\2\3\1\0\4\3\2\2\2\3\3\2\2\0\1\2"+
    "\7\0\1\3\1\2\1\3\6\2\3\3\2\0\11\2\3\3\1\2\6\0\2\3\6\2\4\3\2\2\2\0\2\3\1\2"+
    "\11\3\1\2\3\3\1\2\5\3\2\0\1\2\3\3\4\0\6\2\6\0\10\3\6\2\3\3\1\2\2\3\1\2\7\3"+
    "\2\2\2\3\2\0\2\3\1\2\3\3\1\0\10\2\2\0\2\2\2\0\6\2\1\0\7\2\1\0\1\2\3\0\4\2"+
    "\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3\1\2\5\0\2\2\1\0\5\2\7\0\2\2\4\0\3\3\1\0\6"+
    "\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\3\1\0\5\3\4\0\2\3\2\0\3\3\3\0\1\3"+
    "\7\0\4\2\1\0\1\2\7\0\4\3\3\2\1\3\2\0\1\2\1\0\2\2\1\0\3\2\2\3\1\0\3\3\2\0\1"+
    "\2\10\0\1\2\6\3\2\0\1\3\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\4"+
    "\2\4\0\5\3\3\0\3\3\1\0\4\3\2\0\1\2\6\0\5\3\1\0\5\2\3\0\1\2\7\3\1\0\2\3\5\0"+
    "\2\3\1\0\4\2\1\0\3\2\1\0\2\2\5\0\3\2\2\3\1\2\3\3\1\0\4\3\1\2\5\0\3\2\1\3\2"+
    "\0\2\3\1\0\7\2\1\0\1\2\4\0\1\3\4\0\6\3\1\0\1\3\3\0\2\3\4\0\1\2\1\3\2\2\7\3"+
    "\4\0\10\2\10\3\1\0\2\3\7\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0"+
    "\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\3\2\2\3\1\0\2\3\1\2\2\0\5\2\1\0\1\2\1\0\2"+
    "\3\2\0\4\2\5\0\1\3\1\0\1\3\1\0\1\3\4\0\2\3\5\2\10\3\11\0\1\3\1\0\7\3\1\2\2"+
    "\3\4\2\3\3\1\2\3\3\2\2\7\3\3\2\4\3\5\2\14\3\1\2\1\3\3\2\1\0\7\2\2\0\3\3\2"+
    "\2\3\3\3\0\2\2\2\3\4\0\1\2\1\0\2\3\4\0\4\2\10\3\3\0\1\2\3\0\2\2\1\3\5\0\4"+
    "\3\1\0\5\2\2\3\2\2\1\3\1\2\5\0\5\3\3\2\3\0\10\3\5\2\2\3\3\0\3\2\3\3\1\0\5"+
    "\3\4\2\1\3\4\2\3\3\2\2\3\3\1\0\5\3\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\2\0\3\2"+
    "\1\0\6\2\2\0\2\2\2\26\5\3\5\0\1\2\4\0\1\3\3\0\4\3\11\0\1\2\4\0\1\2\1\0\5\2"+
    "\2\0\1\2\1\0\4\2\1\0\3\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\4\2\3\3\2\2\5\0\2\3\2"+
    "\0\3\2\6\3\1\0\3\2\1\3\3\2\1\3\4\2\1\3\4\2\3\0\1\2\1\0\1\2\2\0\5\2\1\3\2\2"+
    "\2\3\5\2\1\0\4\2\2\3\4\0\1\2\3\3\2\2\1\3\5\2\2\3\3\0\3\2\4\0\3\2\2\3\2\0\6"+
    "\2\1\0\3\3\1\0\2\3\5\0\5\2\5\0\1\2\1\3\3\2\1\0\2\2\1\0\7\2\2\0\1\3\6\0\2\2"+
    "\2\0\3\2\3\0\2\2\3\0\2\2\2\0\3\3\4\0\3\2\1\0\2\2\1\0\1\2\5\0\1\3\2\0\3\3\5"+
    "\0\1\2\3\0\1\2\2\0\4\2\1\0\2\2\2\0\1\2\3\3\1\0\2\3\1\0\5\2\2\3\1\0\3\3\2\0"+
    "\1\3\2\0\3\2\1\3\2\0\1\2\1\0\1\3\4\2\5\0\3\3\3\0\2\3\1\2\1\0\1\2\3\0\4\3\2"+
    "\2\1\0\1\2\1\3\3\0\1\2\3\0\2\2\3\0\5\3\1\2\4\3\3\0\6\3\1\2\6\3\3\0\1\3\1\0"+
    "\2\3\1\0\1\3\2\2\3\0\2\3\6\0\5\3\3\0\6\3\2\0\3\3\2\0\4\3\4\0\1\2\2\0\2\2\2"+
    "\0\4\2\1\0\4\2\1\0\1\2\1\0\6\2\2\0\5\2\1\0\4\2\1\0\4\2\2\0\2\3\4\0\1\3\3\0"+
    "\1\3\2\0\7\3\1\0\2\3\1\0\2\3\1\0\1\2\1\0\1\2\5\0\1\2\1\0\1\2\1\0\3\2\1\0\3"+
    "\2\1\0\3\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\20\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\0\1\45\1\46\3\47\1\3\2\0\3\6\1\47"+
    "\1\0\1\50\1\51\1\52\2\11\2\13\23\3\1\53"+
    "\2\3\1\54\10\3\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\2\42\2\47\1\3\2\0\1\6\1\45\1\0\1\6"+
    "\1\0\1\72\17\3\1\73\3\3\1\74\3\3\1\75"+
    "\6\3\1\76\2\0\1\3\3\0\1\47\2\0\1\3"+
    "\1\77\1\3\1\100\1\101\2\3\1\102\3\3\1\103"+
    "\3\3\1\104\1\3\1\105\3\3\1\106\3\3\1\107"+
    "\2\3\3\0\1\46\1\47\1\110\3\3\1\111\1\112"+
    "\10\3\1\113\4\3\1\114\1\115\2\3\1\116\1\117"+
    "\1\120\5\3\1\121\1\3\1\122\3\3\1\123\1\3"+
    "\1\124\1\125\1\126\1\127\1\130\1\3\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\112\0\u0378\0\u03c2\0\u040c"+
    "\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c"+
    "\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac"+
    "\0\u08f6\0\u0940\0\112\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\112"+
    "\0\112\0\112\0\112\0\112\0\112\0\112\0\112\0\112"+
    "\0\112\0\u0ab2\0\112\0\u0afc\0\u0b46\0\112\0\112\0\u0b90"+
    "\0\112\0\112\0\112\0\u0bda\0\u0c24\0\u0c6e\0\u0cb8\0\u0d02"+
    "\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\112\0\112\0\112"+
    "\0\112\0\u0ebe\0\u0f08\0\112\0\u0f52\0\u0f9c\0\u0fe6\0\u1030"+
    "\0\u107a\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280"+
    "\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\336"+
    "\0\u14d0\0\u151a\0\336\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c"+
    "\0\u16d6\0\u1720\0\u176a\0\112\0\112\0\112\0\112\0\112"+
    "\0\112\0\112\0\u17b4\0\112\0\112\0\112\0\112\0\112"+
    "\0\u17fe\0\112\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970\0\u19ba"+
    "\0\u1970\0\u1a04\0\u1a4e\0\u1a98\0\112\0\u1ae2\0\u1b2c\0\u1b76"+
    "\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6"+
    "\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\336\0\u1f38\0\u1f82\0\u1fcc"+
    "\0\336\0\u2016\0\u2060\0\u20aa\0\336\0\u20f4\0\u213e\0\u2188"+
    "\0\u21d2\0\u221c\0\u2266\0\112\0\u22b0\0\u22fa\0\u2344\0\u238e"+
    "\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\336\0\u2594"+
    "\0\336\0\336\0\u25de\0\u2628\0\336\0\u2672\0\u26bc\0\u2706"+
    "\0\336\0\u2750\0\u279a\0\u27e4\0\336\0\u282e\0\336\0\u2878"+
    "\0\u28c2\0\u290c\0\336\0\u2956\0\u29a0\0\u29ea\0\336\0\u2a34"+
    "\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c\0\u238e\0\u238e\0\336\0\u2ba6"+
    "\0\u2bf0\0\u2c3a\0\336\0\336\0\u2c84\0\u2cce\0\u2d18\0\u2d62"+
    "\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\336\0\u2ed4\0\u2f1e\0\u2f68"+
    "\0\u2fb2\0\336\0\336\0\u2ffc\0\u3046\0\336\0\336\0\336"+
    "\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8\0\336\0\u3202\0\336"+
    "\0\u324c\0\u3296\0\u32e0\0\336\0\u332a\0\336\0\336\0\336"+
    "\0\336\0\336\0\u3374\0\336\0\336";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\3\1\7"+
    "\1\10\1\7\1\4\1\7\1\11\5\4\1\12\1\4"+
    "\1\13\1\4\1\0\1\3\1\0\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\4\1\22\1\23\1\24\1\4"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\4\4\2\7\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\113\0\1\3\4\0\1\3\20\0\1\3\64\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\31\4\31\0\1\64\1\65\57\0\1\66"+
    "\111\0\1\67\33\0\1\7\1\70\1\7\1\0\2\7"+
    "\2\0\1\71\1\72\1\73\1\74\1\75\12\0\1\75"+
    "\4\0\1\71\5\0\1\73\1\72\10\0\2\7\27\0"+
    "\2\4\3\0\1\4\1\76\11\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\31\4\34\0\1\77\1\100"+
    "\1\101\1\0\2\101\1\102\1\103\1\71\1\72\1\73"+
    "\1\74\1\75\10\0\1\103\1\0\1\75\4\0\1\71"+
    "\5\0\1\73\1\72\7\0\1\102\2\101\34\0\1\104"+
    "\1\0\1\104\1\0\2\104\5\0\1\105\40\0\2\104"+
    "\51\0\1\106\40\0\1\107\3\0\1\110\20\0\6\14"+
    "\1\0\22\14\1\111\1\112\57\14\6\16\1\0\23\16"+
    "\1\113\1\114\56\16\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\1\4\1\115"+
    "\6\4\1\116\20\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\2\4\1\117"+
    "\26\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\7\4\1\120\1\4\1\121"+
    "\14\4\1\122\2\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\3\4\1\123"+
    "\3\4\1\124\1\125\12\4\1\126\5\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\12\4\1\127\1\130\4\4\1\131\10\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\10\4\1\132\20\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\2\4\1\133\1\134\25\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\1\4"+
    "\1\135\23\4\1\136\3\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\11\4"+
    "\1\137\4\4\1\140\12\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\11\4"+
    "\1\141\17\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\2\4\1\142\5\4"+
    "\1\143\20\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\3\4\1\144\4\4"+
    "\1\145\20\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\10\4\1\146\20\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\23\4\1\147\5\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\1\4\1\150\12\4\1\151\14\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\10\4\1\152\2\4\1\153\15\4\112\0\1\154"+
    "\111\0\1\155\111\0\1\156\1\0\1\157\107\0\1\160"+
    "\2\0\1\161\106\0\1\162\4\0\1\163\104\0\1\164"+
    "\5\0\1\165\103\0\1\166\111\0\1\167\134\0\1\170"+
    "\1\0\6\64\1\0\103\64\4\171\1\172\1\65\104\171"+
    "\7\0\1\7\1\70\1\7\1\0\2\7\46\0\2\7"+
    "\34\0\1\104\1\0\1\104\1\0\2\104\3\0\1\72"+
    "\1\73\1\0\1\75\12\0\1\75\12\0\1\73\1\72"+
    "\10\0\2\104\34\0\1\173\1\0\1\173\1\0\2\173"+
    "\3\0\1\72\1\73\2\0\1\174\24\0\1\73\1\72"+
    "\10\0\2\173\3\0\1\174\23\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\13\4"+
    "\1\175\15\4\34\0\1\77\1\176\1\77\1\0\2\77"+
    "\3\0\1\72\1\73\1\74\1\75\12\0\1\75\12\0"+
    "\1\73\1\72\10\0\2\77\34\0\1\77\1\100\1\101"+
    "\1\0\2\101\46\0\2\101\34\0\1\77\1\100\1\101"+
    "\1\0\2\101\2\0\1\71\1\72\1\73\1\74\1\75"+
    "\12\0\1\75\4\0\1\71\5\0\1\73\1\72\10\0"+
    "\2\101\25\0\6\177\1\0\1\200\1\177\4\200\1\177"+
    "\1\200\1\201\2\200\1\177\1\200\1\177\1\202\3\0"+
    "\3\177\1\200\1\177\2\200\1\177\1\200\1\177\1\201"+
    "\5\177\2\200\2\177\1\202\5\177\2\200\25\177\13\0"+
    "\2\203\2\0\1\71\23\0\1\71\55\0\1\104\1\204"+
    "\1\104\1\0\2\104\3\0\1\72\1\73\1\0\1\75"+
    "\12\0\1\75\12\0\1\73\1\72\10\0\2\104\47\0"+
    "\1\205\67\0\6\14\1\0\103\14\6\16\1\0\103\16"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\2\4\1\206\26\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\10\4\1\207\20\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\12\4"+
    "\1\210\16\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\6\4\1\211\22\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\14\4\1\212\14\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\12\4\1\213\6\4\1\214\7\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\6\4\1\215\22\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\3\4"+
    "\1\216\25\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\11\4\1\217\17\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\3\4\1\220\25\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\3\4\1\221\25\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\17\4"+
    "\1\222\11\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\13\4\1\223\15\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\11\4\1\224\17\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\20\4\1\225\10\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\24\4"+
    "\1\226\4\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\14\4\1\227\14\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\21\4\1\230\7\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\12\4\1\231\16\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\6\4"+
    "\1\232\22\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\16\4\1\233\12\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\7\4\1\234\21\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\1\4\1\235\27\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\12\4"+
    "\1\236\16\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\13\4\1\237\15\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\13\4\1\240\15\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\1\241\30\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\13\4\1\242"+
    "\15\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\1\4\1\243\27\4\112\0"+
    "\1\244\24\0\5\171\1\245\104\171\7\0\1\173\1\246"+
    "\1\173\1\0\2\173\3\0\1\72\1\73\27\0\1\73"+
    "\1\72\10\0\2\173\34\0\1\173\1\0\1\173\1\0"+
    "\2\173\3\0\1\72\1\73\27\0\1\73\1\72\10\0"+
    "\2\173\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\11\4\1\247\17\4\34\0"+
    "\1\77\1\176\1\77\1\0\2\77\46\0\2\77\34\0"+
    "\1\250\1\0\4\250\1\0\1\250\1\0\2\250\1\0"+
    "\1\250\1\0\1\251\6\0\1\250\1\0\2\250\1\0"+
    "\1\250\7\0\2\250\2\0\1\251\5\0\2\250\25\0"+
    "\6\177\1\0\1\200\1\252\4\200\1\177\1\200\1\201"+
    "\2\200\1\177\1\200\1\177\1\202\3\0\3\177\1\200"+
    "\1\177\2\200\1\177\1\200\1\177\1\201\5\177\2\200"+
    "\2\177\1\202\5\177\2\200\25\177\7\0\1\253\1\0"+
    "\1\253\1\250\2\253\1\0\1\250\1\0\2\250\1\0"+
    "\1\250\1\254\1\251\6\0\1\250\1\0\2\250\1\0"+
    "\1\250\7\0\2\250\2\0\1\251\5\0\2\253\3\0"+
    "\1\254\31\0\1\255\2\0\2\203\2\0\1\71\23\0"+
    "\1\71\55\0\1\104\1\204\1\104\1\0\2\104\46\0"+
    "\2\104\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\3\4\1\256\25\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\7\4\1\257\21\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\14\4\1\260\14\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\2\4\1\261"+
    "\26\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\24\4\1\262\4\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\2\4\1\263\26\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\7\4\1\264\21\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\2\4\1\265"+
    "\26\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\6\4\1\266\22\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\6\4\1\267\3\4\1\270\16\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\1\4\1\271\27\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\12\4\1\272\16\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\11\4\1\273"+
    "\17\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\12\4\1\274\16\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\17\4\1\275\11\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\2\4\1\276\26\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\2\4\1\277"+
    "\26\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\2\4\1\300\26\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\13\4\1\301\15\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\3\4\1\302\25\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\6\4\1\227"+
    "\22\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\10\4\1\303\20\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\7\4\1\304\21\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\22\4\1\305\6\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\7\4\1\306"+
    "\21\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\15\4\1\307\13\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\12\4\1\310\16\4\25\0\4\171\1\172"+
    "\1\245\104\171\7\0\1\173\1\246\1\173\1\0\2\173"+
    "\46\0\2\173\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\12\4\1\311\16\4"+
    "\34\0\1\250\1\312\4\250\1\0\1\250\1\0\2\250"+
    "\1\0\1\250\1\0\1\251\6\0\1\250\1\0\2\250"+
    "\1\0\1\250\7\0\2\250\2\0\1\251\5\0\2\250"+
    "\34\0\1\173\1\0\1\173\1\0\2\173\7\0\1\254"+
    "\36\0\2\173\3\0\1\254\30\0\1\200\1\313\4\200"+
    "\1\0\1\200\1\0\2\200\1\0\1\200\1\0\1\251"+
    "\6\0\1\200\1\0\2\200\1\0\1\200\7\0\2\200"+
    "\2\0\1\251\5\0\2\200\34\0\1\253\1\314\1\253"+
    "\1\250\2\253\1\0\1\250\1\0\1\315\1\316\1\0"+
    "\1\250\1\0\1\251\6\0\1\250\1\0\2\250\1\0"+
    "\1\250\7\0\1\316\1\315\2\0\1\251\5\0\2\253"+
    "\34\0\1\173\1\0\1\173\1\0\2\173\46\0\2\173"+
    "\35\0\1\255\2\0\2\203\77\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\4\4"+
    "\1\317\24\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\1\4\1\320\27\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\1\4\1\321\27\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\13\4\1\322\15\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\6\4"+
    "\1\323\22\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\12\4\1\324\16\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\13\4\1\325\15\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\13\4\1\326\15\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\2\4"+
    "\1\327\26\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\5\4\1\330\23\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\6\4\1\331\22\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\15\4\1\332\13\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\17\4"+
    "\1\333\11\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\14\4\1\334\14\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\2\4\1\335\26\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\3\4\1\336\25\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\13\4"+
    "\1\337\15\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\14\4\1\340\14\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\27\4\1\341\1\4\34\0\1\250"+
    "\1\312\4\250\1\0\1\250\1\0\2\250\1\0\1\250"+
    "\10\0\1\250\1\0\2\250\1\0\1\250\7\0\2\250"+
    "\10\0\2\250\34\0\1\200\1\313\4\200\1\0\1\200"+
    "\1\0\2\200\1\0\1\200\10\0\1\200\1\0\2\200"+
    "\1\0\1\200\7\0\2\200\10\0\2\200\34\0\1\253"+
    "\1\314\1\253\1\250\2\253\1\0\1\250\1\0\2\250"+
    "\1\0\1\250\10\0\1\250\1\0\2\250\1\0\1\250"+
    "\7\0\2\250\10\0\2\253\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\11\4"+
    "\1\342\17\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\11\4\1\343\17\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\5\4\1\344\23\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\11\4\1\345\17\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\1\346\23\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\15\4\1\347\13\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\23\4\1\350\5\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\21\4\1\351\7\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\2\4"+
    "\1\352\26\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\11\4\1\353\17\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\7\4\1\354\21\4\27\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\2\0\1\4"+
    "\3\0\12\4\1\355\16\4\27\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\2\0\1\4\3\0\5\4"+
    "\1\356\23\4\27\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\2\0\1\4\3\0\3\4\1\357\25\4"+
    "\27\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\3\0\30\4\1\360\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\13\4\1\361\15\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\14\4\1\362"+
    "\14\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\3\4\1\363\25\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\16\4\1\364\12\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\2\4\1\365\26\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\12\4\1\366"+
    "\16\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\2\4\1\367\26\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\7\4\1\370\21\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\12\4\1\371\16\4\27\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\3\0\2\4\1\372"+
    "\26\4\27\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\2\0\1\4\3\0\5\4\1\373\23\4\27\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\2\0"+
    "\1\4\3\0\15\4\1\374\13\4\27\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\2\0\1\4\3\0"+
    "\2\4\1\375\26\4\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13246];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\25\1\1\11\4\1\12\11"+
    "\1\1\1\11\2\1\2\11\1\0\3\11\3\1\2\0"+
    "\4\1\1\0\4\11\2\1\1\11\37\1\7\11\1\1"+
    "\5\11\1\1\1\11\3\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\11\36\1\1\11\2\0\1\1\3\0\1\1"+
    "\2\0\34\1\3\0\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CppLexer(){
    this((java.io.Reader)null);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzAtEOF = offset < zzEndRead;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CppLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CPsiTokens.BAD_CHARACTER;
            } 
            // fall through
          case 91: break;
          case 2: 
            { return CPsiTokens.WHITE_SPACE;
            } 
            // fall through
          case 92: break;
          case 3: 
            { return CPsiTokens.IDENTIFIER;
            } 
            // fall through
          case 93: break;
          case 4: 
            { return CPsiTokens.DIV;
            } 
            // fall through
          case 94: break;
          case 5: 
            { return CPsiTokens.ASTERISK;
            } 
            // fall through
          case 95: break;
          case 6: 
            { return CPsiTokens.INTEGER_LITERAL;
            } 
            // fall through
          case 96: break;
          case 7: 
            { return CPsiTokens.DOT;
            } 
            // fall through
          case 97: break;
          case 8: 
            { return CPsiTokens.MINUS;
            } 
            // fall through
          case 98: break;
          case 9: 
            { return CPsiTokens.CHARACTER_LITERAL;
            } 
            // fall through
          case 99: break;
          case 10: 
            { return CPsiTokens.NEXT_LINE;
            } 
            // fall through
          case 100: break;
          case 11: 
            { return CPsiTokens.STRING_LITERAL;
            } 
            // fall through
          case 101: break;
          case 12: 
            { return CPsiTokens.EQ;
            } 
            // fall through
          case 102: break;
          case 13: 
            { return CPsiTokens.EXCL;
            } 
            // fall through
          case 103: break;
          case 14: 
            { return CPsiTokens.OR;
            } 
            // fall through
          case 104: break;
          case 15: 
            { return CPsiTokens.PLUS;
            } 
            // fall through
          case 105: break;
          case 16: 
            { return CPsiTokens.GT;
            } 
            // fall through
          case 106: break;
          case 17: 
            { return CPsiTokens.LT;
            } 
            // fall through
          case 107: break;
          case 18: 
            { return CPsiTokens.AND;
            } 
            // fall through
          case 108: break;
          case 19: 
            { return CPsiTokens.XOR;
            } 
            // fall through
          case 109: break;
          case 20: 
            { return CPsiTokens.PERC;
            } 
            // fall through
          case 110: break;
          case 21: 
            { return CPsiTokens.LPARENTH;
            } 
            // fall through
          case 111: break;
          case 22: 
            { return CPsiTokens.RPARENTH;
            } 
            // fall through
          case 112: break;
          case 23: 
            { return CPsiTokens.LBRACE;
            } 
            // fall through
          case 113: break;
          case 24: 
            { return CPsiTokens.RBRACE;
            } 
            // fall through
          case 114: break;
          case 25: 
            { return CPsiTokens.LBRACKET;
            } 
            // fall through
          case 115: break;
          case 26: 
            { return CPsiTokens.RBRACKET;
            } 
            // fall through
          case 116: break;
          case 27: 
            { return CPsiTokens.SEMICOLON;
            } 
            // fall through
          case 117: break;
          case 28: 
            { return CPsiTokens.COMMA;
            } 
            // fall through
          case 118: break;
          case 29: 
            { return CPsiTokens.TILDE;
            } 
            // fall through
          case 119: break;
          case 30: 
            { return CPsiTokens.QUEST;
            } 
            // fall through
          case 120: break;
          case 31: 
            { return CPsiTokens.COLON;
            } 
            // fall through
          case 121: break;
          case 32: 
            { return CPsiTokens.AT;
            } 
            // fall through
          case 122: break;
          case 33: 
            { return CPsiTokens.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 123: break;
          case 34: 
            { return CPsiTokens.C_STYLE_COMMENT;
            } 
            // fall through
          case 124: break;
          case 35: 
            { return CPsiTokens.DIVEQ;
            } 
            // fall through
          case 125: break;
          case 36: 
            { return CPsiTokens.ASTERISKEQ;
            } 
            // fall through
          case 126: break;
          case 37: 
            { return CPsiTokens.LONG_LITERAL;
            } 
            // fall through
          case 127: break;
          case 38: 
            { return CPsiTokens.FLOAT_LITERAL;
            } 
            // fall through
          case 128: break;
          case 39: 
            { return CPsiTokens.DOUBLE_LITERAL;
            } 
            // fall through
          case 129: break;
          case 40: 
            { return CPsiTokens.MINUSMINUS;
            } 
            // fall through
          case 130: break;
          case 41: 
            { return CPsiTokens.MINUSEQ;
            } 
            // fall through
          case 131: break;
          case 42: 
            { return CPsiTokens.ARROW;
            } 
            // fall through
          case 132: break;
          case 43: 
            { return CPsiTokens.IF_KEYWORD;
            } 
            // fall through
          case 133: break;
          case 44: 
            { return CPsiTokens.DO_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 45: 
            { return CPsiTokens.EQEQ;
            } 
            // fall through
          case 135: break;
          case 46: 
            { return CPsiTokens.NE;
            } 
            // fall through
          case 136: break;
          case 47: 
            { return CPsiTokens.OREQ;
            } 
            // fall through
          case 137: break;
          case 48: 
            { return CPsiTokens.OROR;
            } 
            // fall through
          case 138: break;
          case 49: 
            { return CPsiTokens.PLUSEQ;
            } 
            // fall through
          case 139: break;
          case 50: 
            { return CPsiTokens.PLUSPLUS;
            } 
            // fall through
          case 140: break;
          case 51: 
            { return CPsiTokens.LE;
            } 
            // fall through
          case 141: break;
          case 52: 
            { return CPsiTokens.LTLT;
            } 
            // fall through
          case 142: break;
          case 53: 
            { return CPsiTokens.ANDEQ;
            } 
            // fall through
          case 143: break;
          case 54: 
            { return CPsiTokens.ANDAND;
            } 
            // fall through
          case 144: break;
          case 55: 
            { return CPsiTokens.XOREQ;
            } 
            // fall through
          case 145: break;
          case 56: 
            { return CPsiTokens.PERCEQ;
            } 
            // fall through
          case 146: break;
          case 57: 
            { return CPsiTokens.DOUBLE_COLON;
            } 
            // fall through
          case 147: break;
          case 58: 
            { return CPsiTokens.ELLIPSIS;
            } 
            // fall through
          case 148: break;
          case 59: 
            { return CPsiTokens.NEW_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 60: 
            { return CPsiTokens.INT_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 61: 
            { return CPsiTokens.FOR_KEYWORD;
            } 
            // fall through
          case 151: break;
          case 62: 
            { return CPsiTokens.LTLTEQ;
            } 
            // fall through
          case 152: break;
          case 63: 
            { return CPsiTokens.BOOL_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 64: 
            { return CPsiTokens.ELSE_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 65: 
            { return CPsiTokens.ENUM_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 66: 
            { return CPsiTokens.CASE_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 67: 
            { return CPsiTokens.CHAR_KEYWORD;
            } 
            // fall through
          case 157: break;
          case 68: 
            { return CPsiTokens.LONG_KEYWORD;
            } 
            // fall through
          case 158: break;
          case 69: 
            { return CPsiTokens.BOOL_LITERAL;
            } 
            // fall through
          case 159: break;
          case 70: 
            { return CPsiTokens.GOTO_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 71: 
            { return CPsiTokens.VOID_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 72: 
            { return CPsiTokens.BREAK_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 73: 
            { return CPsiTokens.CLASS_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 74: 
            { return CPsiTokens.CONST_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 75: 
            { return CPsiTokens.WHILE_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 76: 
            { return CPsiTokens.RETURN_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 77: 
            { return CPsiTokens.EXTERN_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 78: 
            { return CPsiTokens.STATIC_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 79: 
            { return CPsiTokens.SIGNED_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 80: 
            { return CPsiTokens.SWITCH_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 81: 
            { return CPsiTokens.PUBLIC_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 82: 
            { return CPsiTokens.__INT64_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 83: 
            { return CPsiTokens.TYPEDEF_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 84: 
            { return CPsiTokens.DEFAULT_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 85: 
            { return CPsiTokens.PRIVATE_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 86: 
            { return CPsiTokens.VIRTUAL_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 87: 
            { return CPsiTokens.EXPLICIT_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 88: 
            { return CPsiTokens.CONTINUE_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 89: 
            { return CPsiTokens.UNSIGNED_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 90: 
            { return CPsiTokens.NAMESPACE_KEYWORD;
            } 
            // fall through
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
