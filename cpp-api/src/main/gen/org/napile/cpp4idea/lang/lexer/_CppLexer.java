/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
package org.napile.cpp4idea.lang.lexer;

import org.napile.cpp4idea.lang.psi.CPsiTokens;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_CppLexer.flex</tt>
 */
public class _CppLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17424 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24"+
    "\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\3\0\1\56\1\57\13\24\1\60\1\47\1\61"+
    "\1\62\1\0\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70\1\30\1\0\1"+
    "\71\3\24\1\55\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76\1\24\1\51"+
    "\6\30\2\24\1\33\1\77\2\30\1\100\5\0\1\101\6\24\1\102\2\0\1\103\1\24\1\104"+
    "\1\0\1\43\1\24\1\105\1\106\1\107\2\24\1\110\1\111\1\112\1\113\1\114\1\64\1"+
    "\115\1\104\1\0\1\116\1\117\1\120\1\121\1\107\2\24\1\110\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\0\1\131\1\30\1\120\1\40\1\37\2\24\1\110\1\132\1"+
    "\112\1\47\1\133\1\134\1\30\1\104\1\0\1\44\1\135\1\120\1\106\1\107\2\24\1\110"+
    "\1\132\1\112\1\113\1\125\1\130\1\115\1\104\1\0\1\44\1\30\1\136\1\137\1\140"+
    "\1\141\1\117\1\137\1\24\1\142\1\143\1\144\1\145\1\30\1\130\1\0\1\30\1\44\1"+
    "\146\1\33\1\110\2\24\1\110\1\24\1\147\1\150\1\144\1\151\1\51\1\104\1\0\2\30"+
    "\1\105\1\33\1\110\2\24\1\110\1\152\1\112\1\150\1\144\1\151\1\35\1\104\1\0"+
    "\1\153\1\30\1\146\1\33\1\110\4\24\1\154\1\150\1\155\1\156\1\45\1\104\1\0\1"+
    "\30\1\42\1\157\1\24\1\25\1\42\2\24\1\37\1\160\1\25\1\161\1\162\1\0\1\130\1"+
    "\0\1\163\1\30\1\43\5\24\1\164\1\165\1\166\1\167\1\0\1\170\4\30\1\171\1\172"+
    "\1\173\1\43\1\174\1\175\1\164\1\176\1\177\1\52\1\0\1\200\4\30\1\134\2\30\1"+
    "\170\1\0\1\170\1\201\1\202\1\24\1\43\3\24\1\31\1\46\1\0\1\150\1\203\1\0\1"+
    "\46\3\0\1\204\1\205\7\30\5\24\1\55\1\0\1\206\1\0\1\170\1\67\1\207\1\210\1"+
    "\211\1\212\1\24\1\213\1\214\1\0\1\52\4\24\1\40\1\22\5\24\1\215\51\24\1\140"+
    "\1\25\1\140\5\24\1\140\4\24\1\140\1\25\1\140\1\24\1\25\7\24\1\140\10\24\1"+
    "\216\4\30\2\24\2\30\12\24\2\77\1\43\114\24\1\106\2\24\1\43\2\24\1\51\11\24"+
    "\1\137\1\24\1\134\1\24\1\33\1\217\1\30\2\24\1\217\1\30\2\24\1\220\1\30\1\24"+
    "\1\33\1\221\1\30\6\24\1\222\3\0\1\223\1\224\1\0\1\170\3\30\1\225\1\0\1\170"+
    "\13\24\1\30\1\226\4\24\1\227\10\24\1\77\1\30\3\24\1\25\1\0\1\2\1\0\1\2\1\130"+
    "\1\0\3\24\1\77\1\31\1\30\5\24\1\116\3\24\1\27\1\0\1\170\4\30\2\24\1\166\1"+
    "\2\6\24\1\203\1\167\3\0\1\113\1\0\1\170\1\0\1\170\1\45\1\30\1\0\1\52\10\30"+
    "\1\230\5\24\1\222\1\0\1\230\1\116\1\0\1\170\1\30\1\231\1\2\1\30\1\232\3\24"+
    "\1\103\1\211\1\0\1\71\4\24\1\67\1\0\1\2\1\30\4\24\1\222\2\0\1\30\1\0\1\233"+
    "\1\0\1\71\3\24\1\77\1\24\1\134\10\30\1\234\2\0\1\235\1\236\1\170\30\24\7\0"+
    "\1\237\42\24\2\77\4\24\2\77\1\24\1\240\3\24\1\77\6\24\1\33\1\177\1\241\1\31"+
    "\1\242\1\116\1\24\1\31\1\241\1\31\1\30\1\231\3\30\1\243\1\30\1\45\1\134\1"+
    "\30\1\244\1\30\1\150\1\0\1\44\1\45\2\30\1\24\1\31\4\24\2\30\1\0\1\204\1\245"+
    "\1\0\1\246\1\30\1\247\1\42\1\160\1\250\1\32\1\251\1\24\1\252\1\253\1\254\2"+
    "\30\5\24\1\134\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1\255\1\256\1\30\4\24"+
    "\1\40\1\22\7\24\1\45\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1"+
    "\253\3\30\1\43\1\213\1\250\1\31\1\43\11\24\1\25\1\257\1\43\12\24\1\215\1\253"+
    "\4\24\1\25\1\43\12\24\1\25\2\30\3\24\1\51\6\30\170\24\1\77\11\30\75\24\1\51"+
    "\2\30\21\24\1\31\10\30\5\24\1\77\41\24\1\31\2\24\1\0\1\256\2\30\5\24\1\166"+
    "\1\100\1\260\3\24\1\67\12\24\1\170\3\30\1\45\1\24\1\42\14\24\1\107\3\24\1"+
    "\25\1\24\7\30\1\45\1\24\1\261\1\262\2\24\1\55\2\30\1\134\6\24\1\116\1\30\1"+
    "\71\5\24\1\222\1\0\1\52\1\30\1\0\1\170\2\0\1\71\1\263\1\0\1\71\2\24\1\67\1"+
    "\52\2\24\1\166\1\0\1\2\1\30\3\24\1\31\1\101\5\24\1\55\1\0\1\246\1\45\1\0\1"+
    "\170\1\264\1\24\1\0\1\265\5\24\1\103\1\167\1\30\1\262\1\266\1\0\1\170\2\24"+
    "\1\25\1\267\6\24\1\210\1\270\1\227\2\30\1\271\1\24\1\55\1\272\1\30\3\273\1"+
    "\30\2\25\5\24\1\215\1\77\1\30\16\24\1\55\1\274\1\0\1\170\64\24\1\116\1\30"+
    "\2\24\1\25\1\275\5\24\1\116\40\30\55\24\1\77\15\24\1\27\4\30\1\25\1\30\1\275"+
    "\1\276\1\24\1\110\1\25\1\177\1\277\15\24\1\27\3\30\1\275\54\24\1\77\2\30\10"+
    "\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\2\0\1\117\2\30\1\253\3\30\1\44\1\33"+
    "\20\24\1\300\1\244\1\30\1\0\1\170\1\43\2\24\1\121\1\43\2\24\1\51\1\301\12"+
    "\24\1\25\3\42\1\302\1\303\2\30\1\304\1\24\1\152\2\24\1\25\2\24\1\305\1\24"+
    "\1\77\1\24\1\77\4\30\17\24\1\51\10\30\6\24\1\31\20\30\1\306\20\30\3\24\1\31"+
    "\6\24\1\134\1\30\1\246\3\30\4\24\1\30\1\253\3\24\1\51\4\24\1\67\1\307\3\24"+
    "\1\77\4\24\1\116\1\24\1\250\5\30\23\24\1\77\1\0\1\170\4\24\1\116\4\24\1\116"+
    "\5\24\1\30\6\24\1\116\23\30\46\24\1\25\1\30\2\24\1\77\1\30\1\24\23\30\1\77"+
    "\1\110\4\24\1\40\1\310\2\24\1\77\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24"+
    "\1\311\1\30\2\24\1\77\1\30\3\24\1\27\10\30\7\24\1\301\10\30\1\312\1\100\1"+
    "\152\1\43\2\24\1\116\1\124\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\43\2\24\1"+
    "\313\3\30\6\24\1\77\1\30\2\24\1\77\1\30\2\24\1\51\1\30\2\24\1\27\15\30\11"+
    "\24\1\134\6\30\6\24\1\51\1\30\6\24\1\51\41\30\1\232\6\24\1\0\1\167\3\30\1"+
    "\130\1\0\1\30\1\64\1\232\5\24\1\0\1\314\2\30\3\24\1\134\1\0\1\170\1\232\3"+
    "\24\1\166\1\0\1\150\1\0\2\30\4\24\1\315\1\30\1\232\5\24\1\55\1\0\1\316\1\317"+
    "\1\0\1\320\4\30\2\24\1\37\2\24\1\222\1\0\1\205\10\30\1\25\1\251\1\24\1\40"+
    "\1\24\1\134\5\24\1\166\1\0\1\307\1\0\1\170\1\146\1\106\1\107\2\24\1\110\1"+
    "\132\1\112\1\113\1\125\1\145\1\253\1\104\2\204\21\30\6\24\1\203\1\0\1\206"+
    "\1\51\1\0\1\170\4\30\6\24\2\0\1\321\1\30\1\0\1\170\24\30\5\24\1\166\1\52\1"+
    "\0\1\246\2\30\1\266\4\30\6\24\2\0\1\322\1\30\1\0\1\170\4\30\5\24\1\55\1\0"+
    "\1\30\1\0\1\170\6\30\3\24\1\323\1\0\1\2\1\0\1\170\54\30\10\24\1\0\1\170\1"+
    "\30\1\45\40\30\1\103\1\232\4\24\1\55\1\324\1\64\1\30\1\103\1\101\4\24\1\242"+
    "\1\213\1\0\1\170\4\30\7\24\1\134\40\30\1\24\1\110\3\24\1\166\1\167\1\0\1\134"+
    "\1\30\1\0\1\170\2\30\1\42\3\24\1\325\2\0\1\46\1\167\11\30\1\25\1\37\4\24\1"+
    "\326\1\327\1\214\1\30\1\0\1\170\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30"+
    "\24\1\116\27\30\5\24\1\25\72\30\10\24\1\25\67\30\7\24\1\134\3\24\1\25\1\0"+
    "\1\170\14\30\3\24\1\77\1\204\1\30\6\24\1\167\1\30\1\116\1\30\1\0\1\170\1\275"+
    "\2\24\1\253\2\24\56\30\10\24\1\31\1\30\1\103\4\0\1\167\1\30\1\64\1\232\1\24"+
    "\10\30\1\27\3\30\75\24\1\31\2\30\36\24\1\51\41\30\43\24\1\25\12\30\61\24\1"+
    "\116\40\30\15\24\1\51\1\24\1\31\1\24\1\134\1\24\1\330\1\2\127\30\1\331\1\332"+
    "\2\0\1\333\1\2\3\30\1\334\22\30\1\317\67\30\12\24\1\33\10\24\1\33\1\335\1"+
    "\336\1\24\1\337\1\152\7\24\1\40\1\340\2\33\3\24\1\341\1\177\1\42\1\110\51"+
    "\24\1\77\3\24\1\110\2\24\1\215\3\24\1\215\2\24\1\33\3\24\1\33\2\24\1\25\3"+
    "\24\1\25\3\24\1\110\3\24\1\110\2\24\1\215\1\342\14\0\1\167\1\231\5\0\1\204"+
    "\1\306\1\30\1\343\2\30\1\231\1\46\1\0\52\30\1\167\2\0\1\344\1\345\1\307\72"+
    "\30\30\24\1\31\1\30\1\167\5\30\10\24\1\222\1\307\1\0\1\170\24\30\1\152\3\24"+
    "\1\171\1\43\1\215\1\346\1\247\1\347\1\171\1\240\1\171\2\215\1\127\1\24\1\37"+
    "\1\24\1\116\1\350\1\37\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33"+
    "\24\1\77\120\24\1\27\1\30\146\24\1\134\3\30\3\24\1\77\74\30\1\126\3\30\14"+
    "\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1864 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\4\1\1\1\2\1\27\1\30\1\7\6\4\4\0\1\1\1\72\1\34\1\37\1\3\1\77\1\75\1\32"+
    "\1\100\1\101\1\6\1\74\1\107\1\25\1\23\1\5\1\15\1\14\2\12\1\70\1\12\1\67\1"+
    "\12\2\10\1\112\1\106\1\35\1\71\1\36\1\111\1\113\1\13\1\17\1\13\1\22\1\24\1"+
    "\21\5\3\1\20\3\3\1\26\7\3\1\16\2\3\1\104\1\33\1\105\1\76\1\11\1\0\1\53\1\51"+
    "\1\42\1\45\1\46\1\47\1\57\1\63\1\40\1\3\1\54\1\43\1\64\1\41\1\55\1\61\1\3"+
    "\1\52\1\50\1\56\1\44\1\62\1\60\1\66\1\65\1\3\1\102\1\73\1\103\1\110\6\4\1"+
    "\31\2\4\2\0\4\3\4\0\1\3\2\0\1\4\7\0\1\3\4\0\1\3\5\0\17\3\1\0\2\3\4\0\4\3\16"+
    "\0\5\3\7\0\1\3\1\0\1\3\1\0\5\3\1\0\2\3\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0"+
    "\1\3\1\0\4\3\1\0\13\3\1\0\3\3\1\0\5\4\2\0\6\3\1\0\7\3\1\0\1\3\15\0\1\3\1\0"+
    "\15\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\1\4\3\3\5\0\6\4\5\0\1\3\4\0\3\4\1\0\1\4"+
    "\3\0\3\3\7\4\4\0\2\3\1\4\13\3\1\0\1\3\7\4\2\3\2\4\1\0\4\4\2\3\2\4\3\3\2\0"+
    "\1\3\7\0\1\4\1\3\1\4\6\3\3\4\2\0\11\3\3\4\1\3\6\0\2\4\6\3\4\4\2\3\2\0\2\4"+
    "\1\3\11\4\1\3\3\4\1\3\5\4\2\0\1\3\3\4\4\0\6\3\6\0\10\4\6\3\3\4\1\3\2\4\1\3"+
    "\7\4\2\3\2\4\2\0\2\4\1\3\3\4\1\0\10\3\2\0\2\3\2\0\6\3\1\0\7\3\1\0\1\3\3\0"+
    "\4\3\2\0\1\4\1\3\7\4\2\0\2\4\2\0\3\4\1\3\5\0\2\3\1\0\5\3\7\0\2\3\4\0\3\4\1"+
    "\0\6\3\4\0\2\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4\3\0"+
    "\1\4\7\0\4\3\1\0\1\3\7\0\4\4\3\3\1\4\2\0\1\3\1\0\2\3\1\0\3\3\2\4\1\0\3\4\2"+
    "\0\1\3\10\0\1\3\6\4\2\0\1\4\1\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1"+
    "\0\4\3\4\0\5\4\3\0\3\4\1\0\4\4\2\0\1\3\6\0\5\4\1\0\5\3\3\0\1\3\7\4\1\0\2\4"+
    "\5\0\2\4\1\0\4\3\1\0\3\3\1\0\2\3\5\0\3\3\2\4\1\3\3\4\1\0\4\4\1\3\5\0\3\3\1"+
    "\4\2\0\2\4\1\0\7\3\1\0\1\3\4\0\1\4\4\0\6\4\1\0\1\4\3\0\2\4\4\0\1\3\1\4\2\3"+
    "\7\4\4\0\10\3\10\4\1\0\2\4\7\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\3\3\2\4\1\0\2\4\1\3\2\0\5\3\1\0\1\3\1"+
    "\0\2\4\2\0\4\3\5\0\1\4\1\0\1\4\1\0\1\4\4\0\2\4\5\3\10\4\11\0\1\4\1\0\7\4\1"+
    "\3\2\4\4\3\3\4\1\3\3\4\2\3\7\4\3\3\4\4\5\3\14\4\1\3\1\4\3\3\1\0\7\3\2\0\3"+
    "\4\2\3\3\4\3\0\2\3\2\4\4\0\1\3\1\0\2\4\4\0\4\3\10\4\3\0\1\3\3\0\2\3\1\4\5"+
    "\0\4\4\1\0\5\3\2\4\2\3\1\4\1\3\5\0\5\4\3\3\3\0\10\4\5\3\2\4\3\0\3\3\3\4\1"+
    "\0\5\4\4\3\1\4\4\3\3\4\2\3\3\4\1\0\5\4\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\2\0"+
    "\3\3\1\0\6\3\2\0\2\3\2\27\5\4\5\0\1\3\4\0\1\4\3\0\4\4\11\0\1\3\4\0\1\3\1\0"+
    "\5\3\2\0\1\3\1\0\4\3\1\0\3\3\2\0\4\3\5\0\5\3\4\0\1\3\4\0\4\3\3\4\2\3\5\0\2"+
    "\4\2\0\3\3\6\4\1\0\3\3\1\4\3\3\1\4\4\3\1\4\4\3\3\0\1\3\1\0\1\3\2\0\5\3\1\4"+
    "\2\3\2\4\5\3\1\0\4\3\2\4\4\0\1\3\3\4\2\3\1\4\5\3\2\4\3\0\3\3\4\0\3\3\2\4\2"+
    "\0\6\3\1\0\3\4\1\0\2\4\5\0\5\3\5\0\1\3\1\4\3\3\1\0\2\3\1\0\7\3\2\0\1\4\6\0"+
    "\2\3\2\0\3\3\3\0\2\3\3\0\2\3\2\0\3\4\4\0\3\3\1\0\2\3\1\0\1\3\5\0\1\4\2\0\3"+
    "\4\5\0\1\3\3\0\1\3\2\0\4\3\1\0\2\3\2\0\1\3\3\4\1\0\2\4\1\0\5\3\2\4\1\0\3\4"+
    "\2\0\1\4\2\0\3\3\1\4\2\0\1\3\1\0\1\4\4\3\5\0\3\4\3\0\2\4\1\3\1\0\1\3\3\0\4"+
    "\4\2\3\1\0\1\3\1\4\3\0\1\3\3\0\2\3\3\0\5\4\1\3\4\4\3\0\6\4\1\3\6\4\3\0\1\4"+
    "\1\0\2\4\1\0\1\4\2\3\3\0\2\4\6\0\5\4\3\0\6\4\2\0\3\4\2\0\4\4\4\0\1\3\2\0\2"+
    "\3\2\0\4\3\1\0\4\3\1\0\1\3\1\0\6\3\2\0\5\3\1\0\4\3\1\0\4\3\2\0\2\4\4\0\1\4"+
    "\3\0\1\4\2\0\7\4\1\0\2\4\1\0\2\4\1\0\1\3\1\0\1\3\5\0\1\3\1\0\1\3\1\0\3\3\1"+
    "\0\3\3\1\0\3\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\4\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\20\4\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\0\1\46\1\47\3\50\1\4\2\0"+
    "\3\7\1\50\1\0\1\51\1\52\1\53\2\12\2\14"+
    "\2\54\1\55\1\56\3\0\1\4\1\57\11\4\1\60"+
    "\23\4\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\2\43\2\50\1\4\2\0"+
    "\1\7\1\46\1\0\1\7\1\0\1\74\1\75\5\0"+
    "\1\76\1\77\15\4\1\100\16\4\2\0\1\4\3\0"+
    "\1\50\10\0\2\4\1\101\2\4\1\102\1\103\2\4"+
    "\1\104\1\105\6\4\1\106\1\4\1\107\1\4\1\110"+
    "\4\4\1\111\1\4\3\0\1\47\1\50\5\0\1\112"+
    "\1\4\1\113\1\114\10\4\1\115\2\4\1\116\4\4"+
    "\2\0\1\117\1\0\1\120\4\4\1\121\1\4\1\122"+
    "\1\123\1\124\1\125\1\4\1\126\2\4\1\127\1\0"+
    "\1\130\1\131\3\4\1\132\1\4\1\133\1\134\1\135"+
    "\1\136\1\4\1\137\1\140\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\114\0\344\0\u0130\0\u017c\0\u01c8"+
    "\0\u0214\0\u0260\0\u02ac\0\u02f8\0\u0344\0\114\0\u0390\0\u03dc"+
    "\0\114\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0"+
    "\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850"+
    "\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0"+
    "\0\u0afc\0\114\0\114\0\114\0\114\0\114\0\114\0\114"+
    "\0\114\0\114\0\114\0\u0b48\0\114\0\u0b94\0\u0be0\0\114"+
    "\0\114\0\u0c2c\0\114\0\114\0\114\0\u0c78\0\u0cc4\0\u0d10"+
    "\0\u0d5c\0\u0da8\0\u0df4\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\114"+
    "\0\114\0\114\0\114\0\u0f70\0\u0fbc\0\114\0\u1008\0\u1054"+
    "\0\u10a0\0\u1008\0\u10ec\0\u1138\0\u1184\0\u11d0\0\344\0\u121c"+
    "\0\u1268\0\u12b4\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c"+
    "\0\344\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690"+
    "\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\u18f0"+
    "\0\u193c\0\u1988\0\u19d4\0\u1a20\0\114\0\114\0\114\0\114"+
    "\0\114\0\114\0\114\0\114\0\114\0\114\0\114\0\u1a6c"+
    "\0\114\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1be8"+
    "\0\u1c80\0\u1ccc\0\u1d18\0\114\0\114\0\u1d64\0\u1db0\0\u1dfc"+
    "\0\u1e48\0\u1e94\0\344\0\344\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4"+
    "\0\u2010\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224"+
    "\0\u2270\0\344\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u2438"+
    "\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698"+
    "\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8"+
    "\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58"+
    "\0\u2ba4\0\344\0\u2bf0\0\u2c3c\0\344\0\344\0\u2c88\0\u2cd4"+
    "\0\344\0\344\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c"+
    "\0\344\0\u2ee8\0\344\0\u2f34\0\344\0\u2f80\0\u2fcc\0\u3018"+
    "\0\u3064\0\344\0\u30b0\0\u30fc\0\u3148\0\u3194\0\u27c8\0\u27c8"+
    "\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310\0\114\0\u335c\0\344"+
    "\0\344\0\u33a8\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570"+
    "\0\u35bc\0\344\0\u3608\0\u3654\0\344\0\u36a0\0\u36ec\0\u3738"+
    "\0\u3784\0\u37d0\0\u381c\0\114\0\u3868\0\114\0\u38b4\0\u3900"+
    "\0\u394c\0\u3998\0\344\0\u39e4\0\344\0\344\0\344\0\344"+
    "\0\u3a30\0\344\0\u3a7c\0\u3ac8\0\344\0\u3b14\0\114\0\114"+
    "\0\u3b60\0\u3bac\0\u3bf8\0\344\0\u3c44\0\344\0\344\0\344"+
    "\0\114\0\u3c90\0\344\0\344\0\344\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\3"+
    "\1\10\1\11\1\10\1\5\1\10\1\12\5\5\1\13"+
    "\1\5\1\14\1\5\1\0\1\3\1\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\3\5"+
    "\1\36\1\37\1\40\1\41\1\42\4\5\2\10\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\115\0\1\3\5\0\1\3\20\0\1\3"+
    "\66\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\31\5\30\0\1\66\1\67\62\0"+
    "\1\70\113\0\1\71\32\0\1\10\1\72\1\10\1\0"+
    "\2\10\2\0\1\73\1\74\1\75\1\76\1\77\16\0"+
    "\1\73\1\0\1\75\1\77\1\74\17\0\2\10\26\0"+
    "\2\5\3\0\1\5\1\100\11\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\31\5\33\0\1\101\1\102"+
    "\1\103\1\0\2\103\1\104\1\105\1\73\1\74\1\75"+
    "\1\76\1\77\16\0\1\73\1\0\1\75\1\77\1\74"+
    "\1\0\1\105\14\0\1\104\2\103\33\0\1\106\1\0"+
    "\1\106\1\0\2\106\5\0\1\107\43\0\2\106\50\0"+
    "\1\110\10\0\1\111\32\0\1\112\22\0\2\15\1\0"+
    "\4\15\1\0\22\15\1\113\1\114\60\15\2\17\1\0"+
    "\4\17\1\0\23\17\1\115\1\116\57\17\2\117\1\0"+
    "\4\117\1\0\23\117\1\120\1\117\1\121\33\117\1\122"+
    "\22\117\40\0\1\123\4\0\1\124\1\125\50\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\1\5\1\126\5\5\1\127\21\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\130\4\5\1\131\15\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\3\5\1\132\7\5\1\133\1\5\1\134\5\5"+
    "\1\135\5\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\15\5\1\136\13\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\1\5\1\137\27\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\140\6\5\1\141\13\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\1\5\1\142\1\5\1\143\22\5\1\144\2\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\13\5\1\145\1\5\1\146\13\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\1\147\15\5\1\150\1\5\1\151"+
    "\10\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\12\5\1\152\2\5\1\153"+
    "\13\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\154\22\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\12\5\1\155\12\5\1\156\3\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\15\5\1\157\13\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\23\5\1\160\5\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\6\0\4\5\1\161"+
    "\5\5\1\162\16\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\6\0\1\163\14\5"+
    "\1\164\13\5\114\0\1\165\113\0\1\166\113\0\1\167"+
    "\1\0\1\170\111\0\1\171\2\0\1\172\110\0\1\173"+
    "\3\0\1\174\107\0\1\175\113\0\1\176\134\0\1\177"+
    "\1\0\2\66\1\0\4\66\1\0\104\66\5\200\1\201"+
    "\1\67\105\200\10\0\1\10\1\72\1\10\1\0\2\10"+
    "\51\0\2\10\33\0\1\106\1\0\1\106\1\0\2\106"+
    "\3\0\1\74\1\75\1\0\1\77\20\0\1\75\1\77"+
    "\1\74\17\0\2\106\33\0\1\202\1\0\1\202\1\0"+
    "\2\202\3\0\1\74\1\75\2\0\1\203\17\0\1\75"+
    "\1\0\1\74\17\0\2\202\3\0\1\203\22\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\1\204\30\5\33\0\1\101\1\205\1\101\1\0"+
    "\2\101\3\0\1\74\1\75\1\76\1\77\20\0\1\75"+
    "\1\77\1\74\17\0\2\101\33\0\1\101\1\102\1\103"+
    "\1\0\2\103\51\0\2\103\33\0\1\101\1\102\1\103"+
    "\1\0\2\103\2\0\1\73\1\74\1\75\1\76\1\77"+
    "\16\0\1\73\1\0\1\75\1\77\1\74\17\0\2\103"+
    "\23\0\2\206\1\0\4\206\1\0\1\207\1\206\4\207"+
    "\1\206\1\207\1\210\2\207\1\206\1\207\1\206\1\211"+
    "\3\0\10\206\1\207\1\210\1\206\3\207\1\206\1\207"+
    "\1\206\1\207\5\206\1\211\5\206\2\207\23\206\14\0"+
    "\2\212\2\0\1\73\22\0\1\73\60\0\1\106\1\213"+
    "\1\106\1\0\2\106\3\0\1\74\1\75\1\0\1\77"+
    "\20\0\1\75\1\77\1\74\17\0\2\106\46\0\1\214"+
    "\70\0\2\15\1\0\4\15\1\0\104\15\2\17\1\0"+
    "\4\17\1\0\104\17\2\117\1\0\4\117\1\0\23\117"+
    "\1\120\1\117\1\0\60\117\1\0\4\117\1\0\104\117"+
    "\71\0\1\215\63\0\1\216\5\0\1\217\112\0\1\220"+
    "\106\0\1\221\1\0\1\222\53\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\16\5"+
    "\1\223\12\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\20\5\1\224\10\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\24\5\1\225\4\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\13\5\1\226\15\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\10\5"+
    "\1\227\20\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\1\5\1\230\27\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\13\5\1\231\15\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\1\5\1\232\27\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\10\5"+
    "\1\233\20\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\7\5\1\234\21\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\4\5\1\235\24\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\10\5\1\236\20\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\16\5"+
    "\1\237\2\5\1\240\7\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\3\5"+
    "\1\241\25\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\12\5\1\242\16\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\17\5\1\243\11\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\13\5\1\244\15\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\1\245"+
    "\30\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\246\22\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\15\5\1\247\13\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\16\5\1\250\12\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\6\0\4\5\1\251"+
    "\24\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\21\5\1\252\7\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\16\5\1\253\12\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\1\254\30\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\11\5\1\255\17\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\1\256\30\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\12\5\1\257\16\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\6\0\1\260\30\5"+
    "\23\0\6\200\1\261\105\200\10\0\1\202\1\262\1\202"+
    "\1\0\2\202\3\0\1\74\1\75\22\0\1\75\1\0"+
    "\1\74\17\0\2\202\33\0\1\202\1\0\1\202\1\0"+
    "\2\202\3\0\1\74\1\75\22\0\1\75\1\0\1\74"+
    "\17\0\2\202\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\1\5\1\263\27\5"+
    "\33\0\1\101\1\205\1\101\1\0\2\101\51\0\2\101"+
    "\33\0\1\264\1\0\4\264\1\0\1\264\1\0\2\264"+
    "\1\0\1\264\1\0\1\265\13\0\1\264\2\0\3\264"+
    "\1\0\1\264\1\0\1\264\5\0\1\265\5\0\2\264"+
    "\23\0\2\206\1\0\4\206\1\0\1\207\1\266\4\207"+
    "\1\206\1\207\1\210\2\207\1\206\1\207\1\206\1\211"+
    "\3\0\10\206\1\207\1\210\1\206\3\207\1\206\1\207"+
    "\1\206\1\207\5\206\1\211\5\206\2\207\23\206\10\0"+
    "\1\267\1\0\1\267\1\264\2\267\1\0\1\264\1\0"+
    "\2\264\1\0\1\264\1\270\1\265\13\0\1\264\2\0"+
    "\3\264\1\0\1\264\1\0\1\264\5\0\1\265\5\0"+
    "\2\267\3\0\1\270\30\0\1\271\2\0\2\212\2\0"+
    "\1\73\22\0\1\73\60\0\1\106\1\213\1\106\1\0"+
    "\2\106\51\0\2\106\65\0\1\272\112\0\1\273\3\0"+
    "\1\274\115\0\1\275\111\0\1\276\116\0\1\277\46\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\300\22\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\10\5\1\301\20\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\6\0\6\5\1\302"+
    "\22\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\10\5\1\303\5\5\1\304"+
    "\12\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\12\5\1\305\16\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\17\5\1\306\11\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\1\307\30\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\13\5\1\310\15\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\24\5\1\311\4\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\312\22\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\6\5"+
    "\1\313\22\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\3\5\1\314\25\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\10\5\1\251\20\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\1\5\1\315\27\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\16\5"+
    "\1\316\12\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\16\5\1\317\12\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\13\5\1\320\15\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\3\5\1\321\25\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\4\5"+
    "\1\322\24\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\323\22\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\324\22\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\15\5\1\325\13\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\3\5"+
    "\1\326\25\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\3\5\1\327\25\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\22\5\1\330\6\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\16\5\1\331\12\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\5\5"+
    "\1\332\23\5\23\0\5\200\1\201\1\261\105\200\10\0"+
    "\1\202\1\262\1\202\1\0\2\202\51\0\2\202\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\16\5\1\333\12\5\33\0\1\264\1\334"+
    "\4\264\1\0\1\264\1\0\2\264\1\0\1\264\1\0"+
    "\1\265\13\0\1\264\2\0\3\264\1\0\1\264\1\0"+
    "\1\264\5\0\1\265\5\0\2\264\33\0\1\202\1\0"+
    "\1\202\1\0\2\202\7\0\1\270\41\0\2\202\3\0"+
    "\1\270\27\0\1\207\1\335\4\207\1\0\1\207\1\0"+
    "\2\207\1\0\1\207\1\0\1\265\13\0\1\207\2\0"+
    "\3\207\1\0\1\207\1\0\1\207\5\0\1\265\5\0"+
    "\2\207\33\0\1\267\1\336\1\267\1\264\2\267\1\0"+
    "\1\264\1\0\1\337\1\340\1\0\1\264\1\0\1\265"+
    "\13\0\1\264\2\0\1\340\1\264\1\337\1\0\1\264"+
    "\1\0\1\264\5\0\1\265\5\0\2\267\33\0\1\202"+
    "\1\0\1\202\1\0\2\202\51\0\2\202\34\0\1\271"+
    "\2\0\2\212\141\0\1\341\115\0\1\342\114\0\1\343"+
    "\105\0\1\344\113\0\1\345\121\0\1\346\50\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\10\5\1\347\20\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\10\5"+
    "\1\350\20\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\16\5\1\351\12\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\1\352\30\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\17\5\1\353\11\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\6\0\4\5\1\354"+
    "\24\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\12\5\1\355\16\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\1\356\30\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\6\5"+
    "\1\357\22\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\1\360\30\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\2\5\1\361\26\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\14\5\1\362\14\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\6\0\12\5\1\363"+
    "\16\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\5\5\1\364\23\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\365\22\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\1\366\30\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\13\5\1\367\15\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\4\5\1\370\24\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\27\5\1\371\1\5\33\0\1\264\1\334\4\264"+
    "\1\0\1\264\1\0\2\264\1\0\1\264\15\0\1\264"+
    "\2\0\3\264\1\0\1\264\1\0\1\264\13\0\2\264"+
    "\33\0\1\207\1\335\4\207\1\0\1\207\1\0\2\207"+
    "\1\0\1\207\15\0\1\207\2\0\3\207\1\0\1\207"+
    "\1\0\1\207\13\0\2\207\33\0\1\267\1\336\1\267"+
    "\1\264\2\267\1\0\1\264\1\0\2\264\1\0\1\264"+
    "\15\0\1\264\2\0\3\264\1\0\1\264\1\0\1\264"+
    "\13\0\2\267\67\0\1\372\115\0\1\373\114\0\1\374"+
    "\105\0\1\375\121\0\1\376\47\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\21\5"+
    "\1\377\7\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\1\5\1\u0100\27\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\1\5\1\u0101\27\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\3\5\1\u0102\25\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\1\5"+
    "\1\u0103\27\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\2\5\1\u0104\26\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\5\5\1\u0105\23\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\2\5\1\u0106\26\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\23\5"+
    "\1\u0107\5\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\1\5\1\u0108\27\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\u0109\22\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\2\5\1\u010a\26\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\16\5"+
    "\1\u010b\12\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\13\5\1\u010c\15\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\30\5\1\u010d\70\0\1\u010e\115\0"+
    "\1\u010f\112\0\1\u0110\50\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\6\0\13\5\1\u0111"+
    "\15\5\26\0\2\5\3\0\13\5\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\6\0\4\5\1\u0112\24\5\26\0"+
    "\2\5\3\0\13\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\u0113\22\5\26\0\2\5\3\0"+
    "\13\5\1\0\1\5\1\0\1\5\2\0\1\5\6\0"+
    "\16\5\1\u0114\12\5\26\0\2\5\3\0\13\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\6\0\1\u0115\30\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\7\5\1\u0116\21\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\u0117\22\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\3\5"+
    "\1\u0118\25\5\71\0\1\u0119\50\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\2\5"+
    "\1\u011a\26\5\26\0\2\5\3\0\13\5\1\0\1\5"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\u011b\22\5"+
    "\26\0\2\5\3\0\13\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\6\0\5\5\1\u011c\23\5\26\0\2\5"+
    "\3\0\13\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\6\0\16\5\1\u011d\12\5\26\0\2\5\3\0\13\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\6\0\6\5"+
    "\1\u011e\22\5\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\11\1\1\11\2\1\1\11"+
    "\30\1\12\11\1\1\1\11\2\1\2\11\1\0\3\11"+
    "\3\1\2\0\4\1\1\0\4\11\2\1\1\11\4\1"+
    "\3\0\37\1\13\11\1\1\1\11\3\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\11\5\0\36\1\2\0\1\1"+
    "\3\0\1\1\10\0\34\1\3\0\2\1\5\0\1\11"+
    "\23\1\2\0\1\11\1\0\1\11\17\1\1\0\2\11"+
    "\10\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CppLexer(){
    this((java.io.Reader)null);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzAtEOF = offset < zzEndRead;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CppLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CPsiTokens.BAD_CHARACTER;
            } 
            // fall through
          case 99: break;
          case 2: 
            { return CPsiTokens.WHITE_SPACE;
            } 
            // fall through
          case 100: break;
          case 3: 
            { return CPsiTokens.NEW_LINE;
            } 
            // fall through
          case 101: break;
          case 4: 
            { return CPsiTokens.IDENTIFIER;
            } 
            // fall through
          case 102: break;
          case 5: 
            { return CPsiTokens.DIV;
            } 
            // fall through
          case 103: break;
          case 6: 
            { return CPsiTokens.ASTERISK;
            } 
            // fall through
          case 104: break;
          case 7: 
            { return CPsiTokens.INTEGER_LITERAL;
            } 
            // fall through
          case 105: break;
          case 8: 
            { return CPsiTokens.DOT;
            } 
            // fall through
          case 106: break;
          case 9: 
            { return CPsiTokens.MINUS;
            } 
            // fall through
          case 107: break;
          case 10: 
            { return CPsiTokens.CHARACTER_LITERAL;
            } 
            // fall through
          case 108: break;
          case 11: 
            { return CPsiTokens.NEXT_LINE;
            } 
            // fall through
          case 109: break;
          case 12: 
            { return CPsiTokens.STRING_LITERAL;
            } 
            // fall through
          case 110: break;
          case 13: 
            { return CPsiTokens.LT;
            } 
            // fall through
          case 111: break;
          case 14: 
            { return CPsiTokens.GT;
            } 
            // fall through
          case 112: break;
          case 15: 
            { return CPsiTokens.EQ;
            } 
            // fall through
          case 113: break;
          case 16: 
            { return CPsiTokens.EXCL;
            } 
            // fall through
          case 114: break;
          case 17: 
            { return CPsiTokens.OR;
            } 
            // fall through
          case 115: break;
          case 18: 
            { return CPsiTokens.PLUS;
            } 
            // fall through
          case 116: break;
          case 19: 
            { return CPsiTokens.AND;
            } 
            // fall through
          case 117: break;
          case 20: 
            { return CPsiTokens.XOR;
            } 
            // fall through
          case 118: break;
          case 21: 
            { return CPsiTokens.PERC;
            } 
            // fall through
          case 119: break;
          case 22: 
            { return CPsiTokens.LPARENTH;
            } 
            // fall through
          case 120: break;
          case 23: 
            { return CPsiTokens.RPARENTH;
            } 
            // fall through
          case 121: break;
          case 24: 
            { return CPsiTokens.LBRACE;
            } 
            // fall through
          case 122: break;
          case 25: 
            { return CPsiTokens.RBRACE;
            } 
            // fall through
          case 123: break;
          case 26: 
            { return CPsiTokens.LBRACKET;
            } 
            // fall through
          case 124: break;
          case 27: 
            { return CPsiTokens.RBRACKET;
            } 
            // fall through
          case 125: break;
          case 28: 
            { return CPsiTokens.SEMICOLON;
            } 
            // fall through
          case 126: break;
          case 29: 
            { return CPsiTokens.COMMA;
            } 
            // fall through
          case 127: break;
          case 30: 
            { return CPsiTokens.TILDE;
            } 
            // fall through
          case 128: break;
          case 31: 
            { return CPsiTokens.QUEST;
            } 
            // fall through
          case 129: break;
          case 32: 
            { return CPsiTokens.COLON;
            } 
            // fall through
          case 130: break;
          case 33: 
            { return CPsiTokens.AT;
            } 
            // fall through
          case 131: break;
          case 34: 
            { return CPsiTokens.END_OF_LINE_COMMENT;
            } 
            // fall through
          case 132: break;
          case 35: 
            { return CPsiTokens.C_STYLE_COMMENT;
            } 
            // fall through
          case 133: break;
          case 36: 
            { return CPsiTokens.DIVEQ;
            } 
            // fall through
          case 134: break;
          case 37: 
            { return CPsiTokens.ASTERISKEQ;
            } 
            // fall through
          case 135: break;
          case 38: 
            { return CPsiTokens.LONG_LITERAL;
            } 
            // fall through
          case 136: break;
          case 39: 
            { return CPsiTokens.FLOAT_LITERAL;
            } 
            // fall through
          case 137: break;
          case 40: 
            { return CPsiTokens.DOUBLE_LITERAL;
            } 
            // fall through
          case 138: break;
          case 41: 
            { return CPsiTokens.MINUSMINUS;
            } 
            // fall through
          case 139: break;
          case 42: 
            { return CPsiTokens.ARROW;
            } 
            // fall through
          case 140: break;
          case 43: 
            { return CPsiTokens.MINUSEQ;
            } 
            // fall through
          case 141: break;
          case 44: 
            { return CPsiTokens.STRING_INCLUDE_LITERAL;
            } 
            // fall through
          case 142: break;
          case 45: 
            { return CPsiTokens.LTLT;
            } 
            // fall through
          case 143: break;
          case 46: 
            { return CPsiTokens.LE;
            } 
            // fall through
          case 144: break;
          case 47: 
            { return CPsiTokens.IF_KEYWORD;
            } 
            // fall through
          case 145: break;
          case 48: 
            { return CPsiTokens.DO_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 49: 
            { return CPsiTokens.EQEQ;
            } 
            // fall through
          case 147: break;
          case 50: 
            { return CPsiTokens.NE;
            } 
            // fall through
          case 148: break;
          case 51: 
            { return CPsiTokens.OREQ;
            } 
            // fall through
          case 149: break;
          case 52: 
            { return CPsiTokens.OROR;
            } 
            // fall through
          case 150: break;
          case 53: 
            { return CPsiTokens.PLUSEQ;
            } 
            // fall through
          case 151: break;
          case 54: 
            { return CPsiTokens.PLUSPLUS;
            } 
            // fall through
          case 152: break;
          case 55: 
            { return CPsiTokens.ANDEQ;
            } 
            // fall through
          case 153: break;
          case 56: 
            { return CPsiTokens.ANDAND;
            } 
            // fall through
          case 154: break;
          case 57: 
            { return CPsiTokens.XOREQ;
            } 
            // fall through
          case 155: break;
          case 58: 
            { return CPsiTokens.PERCEQ;
            } 
            // fall through
          case 156: break;
          case 59: 
            { return CPsiTokens.DOUBLE_COLON;
            } 
            // fall through
          case 157: break;
          case 60: 
            { return CPsiTokens.ELLIPSIS;
            } 
            // fall through
          case 158: break;
          case 61: 
            { return CPsiTokens.LTLTEQ;
            } 
            // fall through
          case 159: break;
          case 62: 
            { return CPsiTokens.INT_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 63: 
            { return CPsiTokens.NEW_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 64: 
            { return CPsiTokens.FOR_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 65: 
            { return CPsiTokens.CASE_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 66: 
            { return CPsiTokens.CHAR_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 67: 
            { return CPsiTokens.LONG_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 68: 
            { return CPsiTokens.ENUM_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 69: 
            { return CPsiTokens.ELSE_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 70: 
            { return CPsiTokens.BOOL_KEYWORD;
            } 
            // fall through
          case 168: break;
          case 71: 
            { return CPsiTokens.BOOL_LITERAL;
            } 
            // fall through
          case 169: break;
          case 72: 
            { return CPsiTokens.GOTO_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 73: 
            { return CPsiTokens.VOID_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 74: 
            { return CPsiTokens.S_ELSE_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 75: 
            { return CPsiTokens.CLASS_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 76: 
            { return CPsiTokens.CONST_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 77: 
            { return CPsiTokens.BREAK_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 78: 
            { return CPsiTokens.WHILE_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 79: 
            { return CPsiTokens.S_IFDEF_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 80: 
            { return CPsiTokens.S_ENDIF_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 81: 
            { return CPsiTokens.EXTERN_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 82: 
            { return CPsiTokens.SIGNED_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 83: 
            { return CPsiTokens.STATIC_KEYWORD;
            } 
            // fall through
          case 181: break;
          case 84: 
            { return CPsiTokens.SWITCH_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 85: 
            { return CPsiTokens.RETURN_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 86: 
            { return CPsiTokens.PUBLIC_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 87: 
            { return CPsiTokens.__INT64_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 88: 
            { return CPsiTokens.S_IFNDEF_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 89: 
            { return CPsiTokens.S_DEFINE_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 90: 
            { return CPsiTokens.DEFAULT_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 91: 
            { return CPsiTokens.TYPEDEF_KEYWORD;
            } 
            // fall through
          case 189: break;
          case 92: 
            { return CPsiTokens.PRIVATE_KEYWORD;
            } 
            // fall through
          case 190: break;
          case 93: 
            { return CPsiTokens.VIRTUAL_KEYWORD;
            } 
            // fall through
          case 191: break;
          case 94: 
            { return CPsiTokens.S_INCLUDE_KEYWORD;
            } 
            // fall through
          case 192: break;
          case 95: 
            { return CPsiTokens.CONTINUE_KEYWORD;
            } 
            // fall through
          case 193: break;
          case 96: 
            { return CPsiTokens.UNSIGNED_KEYWORD;
            } 
            // fall through
          case 194: break;
          case 97: 
            { return CPsiTokens.EXPLICIT_KEYWORD;
            } 
            // fall through
          case 195: break;
          case 98: 
            { return CPsiTokens.NAMESPACE_KEYWORD;
            } 
            // fall through
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
